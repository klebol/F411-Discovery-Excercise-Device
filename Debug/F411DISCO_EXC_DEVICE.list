
F411DISCO_EXC_DEVICE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004834  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080049d4  080049d4  000149d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a28  08004a28  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a28  08004a28  00014a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a30  08004a30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a34  08004a34  00014a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000070  08004aa8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08004aa8  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d0c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a37  00000000  00000000  00030dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  000337e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  000345d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178d7  00000000  00000000  000352a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013dbd  00000000  00000000  0004cb7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c506  00000000  00000000  0006093c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ece42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c6c  00000000  00000000  000ece94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080049bc 	.word	0x080049bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080049bc 	.word	0x080049bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	; 0x30
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
 800059e:	4b70      	ldr	r3, [pc, #448]	; (8000760 <MX_GPIO_Init+0x1dc>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a6f      	ldr	r2, [pc, #444]	; (8000760 <MX_GPIO_Init+0x1dc>)
 80005a4:	f043 0310 	orr.w	r3, r3, #16
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b6d      	ldr	r3, [pc, #436]	; (8000760 <MX_GPIO_Init+0x1dc>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0310 	and.w	r3, r3, #16
 80005b2:	61bb      	str	r3, [r7, #24]
 80005b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	4b69      	ldr	r3, [pc, #420]	; (8000760 <MX_GPIO_Init+0x1dc>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a68      	ldr	r2, [pc, #416]	; (8000760 <MX_GPIO_Init+0x1dc>)
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b66      	ldr	r3, [pc, #408]	; (8000760 <MX_GPIO_Init+0x1dc>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	4b62      	ldr	r3, [pc, #392]	; (8000760 <MX_GPIO_Init+0x1dc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a61      	ldr	r2, [pc, #388]	; (8000760 <MX_GPIO_Init+0x1dc>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b5f      	ldr	r3, [pc, #380]	; (8000760 <MX_GPIO_Init+0x1dc>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	4b5b      	ldr	r3, [pc, #364]	; (8000760 <MX_GPIO_Init+0x1dc>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a5a      	ldr	r2, [pc, #360]	; (8000760 <MX_GPIO_Init+0x1dc>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b58      	ldr	r3, [pc, #352]	; (8000760 <MX_GPIO_Init+0x1dc>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	4b54      	ldr	r3, [pc, #336]	; (8000760 <MX_GPIO_Init+0x1dc>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a53      	ldr	r2, [pc, #332]	; (8000760 <MX_GPIO_Init+0x1dc>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b51      	ldr	r3, [pc, #324]	; (8000760 <MX_GPIO_Init+0x1dc>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b4d      	ldr	r3, [pc, #308]	; (8000760 <MX_GPIO_Init+0x1dc>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a4c      	ldr	r2, [pc, #304]	; (8000760 <MX_GPIO_Init+0x1dc>)
 8000630:	f043 0308 	orr.w	r3, r3, #8
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b4a      	ldr	r3, [pc, #296]	; (8000760 <MX_GPIO_Init+0x1dc>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4847      	ldr	r0, [pc, #284]	; (8000764 <MX_GPIO_Init+0x1e0>)
 8000648:	f001 f896 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2101      	movs	r1, #1
 8000650:	4845      	ldr	r0, [pc, #276]	; (8000768 <MX_GPIO_Init+0x1e4>)
 8000652:	f001 f891 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000656:	2200      	movs	r2, #0
 8000658:	f24f 0110 	movw	r1, #61456	; 0xf010
 800065c:	4843      	ldr	r0, [pc, #268]	; (800076c <MX_GPIO_Init+0x1e8>)
 800065e:	f001 f88b 	bl	8001778 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000662:	2304      	movs	r3, #4
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000666:	2300      	movs	r3, #0
 8000668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	4619      	mov	r1, r3
 8000674:	483b      	ldr	r0, [pc, #236]	; (8000764 <MX_GPIO_Init+0x1e0>)
 8000676:	f000 fefb 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800067a:	2308      	movs	r3, #8
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	4834      	ldr	r0, [pc, #208]	; (8000764 <MX_GPIO_Init+0x1e0>)
 8000692:	f000 feed 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000696:	2332      	movs	r3, #50	; 0x32
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800069a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800069e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4619      	mov	r1, r3
 80006aa:	482e      	ldr	r0, [pc, #184]	; (8000764 <MX_GPIO_Init+0x1e0>)
 80006ac:	f000 fee0 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80006b0:	2301      	movs	r3, #1
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4619      	mov	r1, r3
 80006c6:	4828      	ldr	r0, [pc, #160]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80006c8:	f000 fed2 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006d0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	4619      	mov	r1, r3
 80006e0:	4823      	ldr	r0, [pc, #140]	; (8000770 <MX_GPIO_Init+0x1ec>)
 80006e2:	f000 fec5 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006e6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006ea:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	481b      	ldr	r0, [pc, #108]	; (800076c <MX_GPIO_Init+0x1e8>)
 8000700:	f000 feb6 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	4815      	ldr	r0, [pc, #84]	; (8000770 <MX_GPIO_Init+0x1ec>)
 800071a:	f000 fea9 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800071e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000730:	230a      	movs	r3, #10
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	480d      	ldr	r0, [pc, #52]	; (8000770 <MX_GPIO_Init+0x1ec>)
 800073c:	f000 fe98 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000740:	2320      	movs	r3, #32
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	2300      	movs	r3, #0
 8000746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <MX_GPIO_Init+0x1e8>)
 8000754:	f000 fe8c 	bl	8001470 <HAL_GPIO_Init>

}
 8000758:	bf00      	nop
 800075a:	3730      	adds	r7, #48	; 0x30
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40021000 	.word	0x40021000
 8000768:	40020800 	.word	0x40020800
 800076c:	40020c00 	.word	0x40020c00
 8000770:	40020000 	.word	0x40020000

08000774 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2C1_Init+0x50>)
 800077a:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <MX_I2C1_Init+0x54>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_I2C1_Init+0x50>)
 8000780:	4a12      	ldr	r2, [pc, #72]	; (80007cc <MX_I2C1_Init+0x58>)
 8000782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_I2C1_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_I2C1_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_I2C1_Init+0x50>)
 8000792:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000796:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_I2C1_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_I2C1_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_I2C1_Init+0x50>)
 80007b2:	f000 fffb 	bl	80017ac <HAL_I2C_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007bc:	f000 fa3a 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2000008c 	.word	0x2000008c
 80007c8:	40005400 	.word	0x40005400
 80007cc:	000186a0 	.word	0x000186a0

080007d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a19      	ldr	r2, [pc, #100]	; (8000854 <HAL_I2C_MspInit+0x84>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d12c      	bne.n	800084c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <HAL_I2C_MspInit+0x88>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a17      	ldr	r2, [pc, #92]	; (8000858 <HAL_I2C_MspInit+0x88>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <HAL_I2C_MspInit+0x88>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800080e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000814:	2312      	movs	r3, #18
 8000816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000818:	2301      	movs	r3, #1
 800081a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000820:	2304      	movs	r3, #4
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	480c      	ldr	r0, [pc, #48]	; (800085c <HAL_I2C_MspInit+0x8c>)
 800082c:	f000 fe20 	bl	8001470 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_I2C_MspInit+0x88>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	4a07      	ldr	r2, [pc, #28]	; (8000858 <HAL_I2C_MspInit+0x88>)
 800083a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800083e:	6413      	str	r3, [r2, #64]	; 0x40
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_I2C_MspInit+0x88>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800084c:	bf00      	nop
 800084e:	3728      	adds	r7, #40	; 0x28
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40005400 	.word	0x40005400
 8000858:	40023800 	.word	0x40023800
 800085c:	40020400 	.word	0x40020400

08000860 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_I2S2_Init+0x50>)
 8000866:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <MX_I2S2_Init+0x54>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_I2S2_Init+0x50>)
 800086c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000870:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_I2S2_Init+0x50>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_I2S2_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_I2S2_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_I2S2_Init+0x50>)
 8000886:	4a0c      	ldr	r2, [pc, #48]	; (80008b8 <MX_I2S2_Init+0x58>)
 8000888:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_I2S2_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_I2S2_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_I2S2_Init+0x50>)
 8000898:	2201      	movs	r2, #1
 800089a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_I2S2_Init+0x50>)
 800089e:	f001 f8c9 	bl	8001a34 <HAL_I2S_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80008a8:	f000 f9c4 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000e0 	.word	0x200000e0
 80008b4:	40003800 	.word	0x40003800
 80008b8:	00017700 	.word	0x00017700

080008bc <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_I2S3_Init+0x54>)
 80008c2:	4a14      	ldr	r2, [pc, #80]	; (8000914 <MX_I2S3_Init+0x58>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_I2S3_Init+0x54>)
 80008c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008cc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_I2S3_Init+0x54>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_I2S3_Init+0x54>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <MX_I2S3_Init+0x54>)
 80008dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_I2S3_Init+0x54>)
 80008e4:	4a0c      	ldr	r2, [pc, #48]	; (8000918 <MX_I2S3_Init+0x5c>)
 80008e6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_I2S3_Init+0x54>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_I2S3_Init+0x54>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_I2S3_Init+0x54>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_I2S3_Init+0x54>)
 80008fc:	f001 f89a 	bl	8001a34 <HAL_I2S_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000906:	f000 f995 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000128 	.word	0x20000128
 8000914:	40003c00 	.word	0x40003c00
 8000918:	00017700 	.word	0x00017700

0800091c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08e      	sub	sp, #56	; 0x38
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a59      	ldr	r2, [pc, #356]	; (8000aa0 <HAL_I2S_MspInit+0x184>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d15b      	bne.n	80009f6 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
 8000942:	4b58      	ldr	r3, [pc, #352]	; (8000aa4 <HAL_I2S_MspInit+0x188>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a57      	ldr	r2, [pc, #348]	; (8000aa4 <HAL_I2S_MspInit+0x188>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b55      	ldr	r3, [pc, #340]	; (8000aa4 <HAL_I2S_MspInit+0x188>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000956:	623b      	str	r3, [r7, #32]
 8000958:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
 800095e:	4b51      	ldr	r3, [pc, #324]	; (8000aa4 <HAL_I2S_MspInit+0x188>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a50      	ldr	r2, [pc, #320]	; (8000aa4 <HAL_I2S_MspInit+0x188>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b4e      	ldr	r3, [pc, #312]	; (8000aa4 <HAL_I2S_MspInit+0x188>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	61fb      	str	r3, [r7, #28]
 8000974:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
 800097a:	4b4a      	ldr	r3, [pc, #296]	; (8000aa4 <HAL_I2S_MspInit+0x188>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a49      	ldr	r2, [pc, #292]	; (8000aa4 <HAL_I2S_MspInit+0x188>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b47      	ldr	r3, [pc, #284]	; (8000aa4 <HAL_I2S_MspInit+0x188>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	61bb      	str	r3, [r7, #24]
 8000990:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000992:	2304      	movs	r3, #4
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80009a2:	2306      	movs	r3, #6
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	483e      	ldr	r0, [pc, #248]	; (8000aa8 <HAL_I2S_MspInit+0x18c>)
 80009ae:	f000 fd5f 	bl	8001470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009b2:	2308      	movs	r3, #8
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009c2:	2305      	movs	r3, #5
 80009c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ca:	4619      	mov	r1, r3
 80009cc:	4836      	ldr	r0, [pc, #216]	; (8000aa8 <HAL_I2S_MspInit+0x18c>)
 80009ce:	f000 fd4f 	bl	8001470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80009d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e4:	2305      	movs	r3, #5
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	482f      	ldr	r0, [pc, #188]	; (8000aac <HAL_I2S_MspInit+0x190>)
 80009f0:	f000 fd3e 	bl	8001470 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009f4:	e04f      	b.n	8000a96 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a2d      	ldr	r2, [pc, #180]	; (8000ab0 <HAL_I2S_MspInit+0x194>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d14a      	bne.n	8000a96 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <HAL_I2S_MspInit+0x188>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	4a26      	ldr	r2, [pc, #152]	; (8000aa4 <HAL_I2S_MspInit+0x188>)
 8000a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a10:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <HAL_I2S_MspInit+0x188>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a18:	617b      	str	r3, [r7, #20]
 8000a1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <HAL_I2S_MspInit+0x188>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a24:	4a1f      	ldr	r2, [pc, #124]	; (8000aa4 <HAL_I2S_MspInit+0x188>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <HAL_I2S_MspInit+0x188>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <HAL_I2S_MspInit+0x188>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	4a18      	ldr	r2, [pc, #96]	; (8000aa4 <HAL_I2S_MspInit+0x188>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	6313      	str	r3, [r2, #48]	; 0x30
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <HAL_I2S_MspInit+0x188>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	f003 0304 	and.w	r3, r3, #4
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a54:	2310      	movs	r3, #16
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a64:	2306      	movs	r3, #6
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <HAL_I2S_MspInit+0x198>)
 8000a70:	f000 fcfe 	bl	8001470 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a74:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a86:	2306      	movs	r3, #6
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <HAL_I2S_MspInit+0x18c>)
 8000a92:	f000 fced 	bl	8001470 <HAL_GPIO_Init>
}
 8000a96:	bf00      	nop
 8000a98:	3738      	adds	r7, #56	; 0x38
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40003800 	.word	0x40003800
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020800 	.word	0x40020800
 8000aac:	40020400 	.word	0x40020400
 8000ab0:	40003c00 	.word	0x40003c00
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abc:	f000 fa9e 	bl	8000ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac0:	f000 f824 	bl	8000b0c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ac4:	f000 f88a 	bl	8000bdc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac8:	f7ff fd5c 	bl	8000584 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000acc:	f7ff fe52 	bl	8000774 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000ad0:	f7ff fec6 	bl	8000860 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000ad4:	f7ff fef2 	bl	80008bc <MX_I2S3_Init>
  MX_SPI1_Init();
 8000ad8:	f000 f8b2 	bl	8000c40 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000adc:	f000 f9d2 	bl	8000e84 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000ae0:	f000 f89c 	bl	8000c1c <MX_NVIC_Init>
  while (1)
  {



	  sprintf(Message,"TEST");
 8000ae4:	4906      	ldr	r1, [pc, #24]	; (8000b00 <main+0x48>)
 8000ae6:	4807      	ldr	r0, [pc, #28]	; (8000b04 <main+0x4c>)
 8000ae8:	f003 fafa 	bl	80040e0 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sizeof(Message), 100);
 8000aec:	2364      	movs	r3, #100	; 0x64
 8000aee:	2220      	movs	r2, #32
 8000af0:	4904      	ldr	r1, [pc, #16]	; (8000b04 <main+0x4c>)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <main+0x50>)
 8000af4:	f002 fafc 	bl	80030f0 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000af8:	2064      	movs	r0, #100	; 0x64
 8000afa:	f000 faf1 	bl	80010e0 <HAL_Delay>
	  sprintf(Message,"TEST");
 8000afe:	e7f1      	b.n	8000ae4 <main+0x2c>
 8000b00:	080049d4 	.word	0x080049d4
 8000b04:	20000170 	.word	0x20000170
 8000b08:	200001ec 	.word	0x200001ec

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b094      	sub	sp, #80	; 0x50
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 0320 	add.w	r3, r7, #32
 8000b16:	2230      	movs	r2, #48	; 0x30
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f003 fad8 	bl	80040d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <SystemClock_Config+0xc8>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	4a26      	ldr	r2, [pc, #152]	; (8000bd4 <SystemClock_Config+0xc8>)
 8000b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b40:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <SystemClock_Config+0xc8>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <SystemClock_Config+0xcc>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a20      	ldr	r2, [pc, #128]	; (8000bd8 <SystemClock_Config+0xcc>)
 8000b56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <SystemClock_Config+0xcc>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b72:	2302      	movs	r3, #2
 8000b74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b80:	23c0      	movs	r3, #192	; 0xc0
 8000b82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b84:	2304      	movs	r3, #4
 8000b86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b88:	2308      	movs	r3, #8
 8000b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8c:	f107 0320 	add.w	r3, r7, #32
 8000b90:	4618      	mov	r0, r3
 8000b92:	f001 fbef 	bl	8002374 <HAL_RCC_OscConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b9c:	f000 f84a 	bl	8000c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	2103      	movs	r1, #3
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f001 fe51 	bl	8002864 <HAL_RCC_ClockConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bc8:	f000 f834 	bl	8000c34 <Error_Handler>
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3750      	adds	r7, #80	; 0x50
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40007000 	.word	0x40007000

08000bdc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be2:	463b      	mov	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
 8000bf0:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000bf6:	23c8      	movs	r3, #200	; 0xc8
 8000bf8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000bfa:	2305      	movs	r3, #5
 8000bfc:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c02:	463b      	mov	r3, r7
 8000c04:	4618      	mov	r0, r3
 8000c06:	f002 f84d 	bl	8002ca4 <HAL_RCCEx_PeriphCLKConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000c10:	f000 f810 	bl	8000c34 <Error_Handler>
  }
}
 8000c14:	bf00      	nop
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	2025      	movs	r0, #37	; 0x25
 8000c26:	f000 fb5a 	bl	80012de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c2a:	2025      	movs	r0, #37	; 0x25
 8000c2c:	f000 fb73 	bl	8001316 <HAL_NVIC_EnableIRQ>
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <Error_Handler+0x8>
	...

08000c40 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c46:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <MX_SPI1_Init+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c8c:	220a      	movs	r2, #10
 8000c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c92:	f002 f957 	bl	8002f44 <HAL_SPI_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c9c:	f7ff ffca 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000190 	.word	0x20000190
 8000ca8:	40013000 	.word	0x40013000

08000cac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a19      	ldr	r2, [pc, #100]	; (8000d30 <HAL_SPI_MspInit+0x84>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d12b      	bne.n	8000d26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d06:	23e0      	movs	r3, #224	; 0xe0
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d16:	2305      	movs	r3, #5
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_SPI_MspInit+0x8c>)
 8000d22:	f000 fba5 	bl	8001470 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d26:	bf00      	nop
 8000d28:	3728      	adds	r7, #40	; 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40013000 	.word	0x40013000
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020000 	.word	0x40020000

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d7a:	2007      	movs	r0, #7
 8000d7c:	f000 faa4 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd8:	f000 f962 	bl	80010a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <USART1_IRQHandler+0x10>)
 8000de6:	f002 fa15 	bl	8003214 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200001ec 	.word	0x200001ec

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d207      	bcs.n	8000e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e24:	f003 f92a 	bl	800407c <__errno>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	e009      	b.n	8000e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <_sbrk+0x64>)
 8000e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20020000 	.word	0x20020000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	200001e8 	.word	0x200001e8
 8000e5c:	20000248 	.word	0x20000248

08000e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <SystemInit+0x20>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <SystemInit+0x20>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000e8a:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <MX_USART1_UART_Init+0x50>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000ebc:	f002 f8cb 	bl	8003056 <HAL_UART_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ec6:	f7ff feb5 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200001ec 	.word	0x200001ec
 8000ed4:	40011000 	.word	0x40011000

08000ed8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a28      	ldr	r2, [pc, #160]	; (8000f98 <HAL_UART_MspInit+0xc0>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d14a      	bne.n	8000f90 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <HAL_UART_MspInit+0xc4>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a26      	ldr	r2, [pc, #152]	; (8000f9c <HAL_UART_MspInit+0xc4>)
 8000f04:	f043 0310 	orr.w	r3, r3, #16
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <HAL_UART_MspInit+0xc4>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <HAL_UART_MspInit+0xc4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a1f      	ldr	r2, [pc, #124]	; (8000f9c <HAL_UART_MspInit+0xc4>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <HAL_UART_MspInit+0xc4>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <HAL_UART_MspInit+0xc4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a18      	ldr	r2, [pc, #96]	; (8000f9c <HAL_UART_MspInit+0xc4>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <HAL_UART_MspInit+0xc4>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f60:	2307      	movs	r3, #7
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <HAL_UART_MspInit+0xc8>)
 8000f6c:	f000 fa80 	bl	8001470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f80:	2307      	movs	r3, #7
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <HAL_UART_MspInit+0xcc>)
 8000f8c:	f000 fa70 	bl	8001470 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	; 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40011000 	.word	0x40011000
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fae:	490e      	ldr	r1, [pc, #56]	; (8000fe8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc4:	4c0b      	ldr	r4, [pc, #44]	; (8000ff4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fd2:	f7ff ff45 	bl	8000e60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f003 f857 	bl	8004088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fda:	f7ff fd6d 	bl	8000ab8 <main>
  bx  lr    
 8000fde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fe0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fec:	08004a38 	.word	0x08004a38
  ldr r2, =_sbss
 8000ff0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ff4:	20000244 	.word	0x20000244

08000ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC_IRQHandler>
	...

08000ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <HAL_Init+0x40>)
 8001006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800100a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <HAL_Init+0x40>)
 8001012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <HAL_Init+0x40>)
 800101e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001024:	2003      	movs	r0, #3
 8001026:	f000 f94f 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102a:	2000      	movs	r0, #0
 800102c:	f000 f808 	bl	8001040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001030:	f7ff fe84 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023c00 	.word	0x40023c00

08001040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_InitTick+0x54>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_InitTick+0x58>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001056:	fbb3 f3f1 	udiv	r3, r3, r1
 800105a:	fbb2 f3f3 	udiv	r3, r2, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f000 f967 	bl	8001332 <HAL_SYSTICK_Config>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e00e      	b.n	800108c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b0f      	cmp	r3, #15
 8001072:	d80a      	bhi.n	800108a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001074:	2200      	movs	r2, #0
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f000 f92f 	bl	80012de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001080:	4a06      	ldr	r2, [pc, #24]	; (800109c <HAL_InitTick+0x5c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000000 	.word	0x20000000
 8001098:	20000008 	.word	0x20000008
 800109c:	20000004 	.word	0x20000004

080010a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x20>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x24>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_IncTick+0x24>)
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000230 	.word	0x20000230

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_GetTick+0x14>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000230 	.word	0x20000230

080010e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e8:	f7ff ffee 	bl	80010c8 <HAL_GetTick>
 80010ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f8:	d005      	beq.n	8001106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_Delay+0x44>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4413      	add	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001106:	bf00      	nop
 8001108:	f7ff ffde 	bl	80010c8 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8f7      	bhi.n	8001108 <HAL_Delay+0x28>
  {
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000008 	.word	0x20000008

08001128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001144:	4013      	ands	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115a:	4a04      	ldr	r2, [pc, #16]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	60d3      	str	r3, [r2, #12]
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <__NVIC_GetPriorityGrouping+0x18>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 0307 	and.w	r3, r3, #7
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	2b00      	cmp	r3, #0
 800119c:	db0b      	blt.n	80011b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	f003 021f 	and.w	r2, r3, #31
 80011a4:	4907      	ldr	r1, [pc, #28]	; (80011c4 <__NVIC_EnableIRQ+0x38>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	095b      	lsrs	r3, r3, #5
 80011ac:	2001      	movs	r0, #1
 80011ae:	fa00 f202 	lsl.w	r2, r0, r2
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000e100 	.word	0xe000e100

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	; (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	; (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001294:	d301      	bcc.n	800129a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001296:	2301      	movs	r3, #1
 8001298:	e00f      	b.n	80012ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <SysTick_Config+0x40>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a2:	210f      	movs	r1, #15
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f7ff ff8e 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <SysTick_Config+0x40>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <SysTick_Config+0x40>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	e000e010 	.word	0xe000e010

080012c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff29 	bl	8001128 <__NVIC_SetPriorityGrouping>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f0:	f7ff ff3e 	bl	8001170 <__NVIC_GetPriorityGrouping>
 80012f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	6978      	ldr	r0, [r7, #20]
 80012fc:	f7ff ff8e 	bl	800121c <NVIC_EncodePriority>
 8001300:	4602      	mov	r2, r0
 8001302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff5d 	bl	80011c8 <__NVIC_SetPriority>
}
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff31 	bl	800118c <__NVIC_EnableIRQ>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ffa2 	bl	8001284 <SysTick_Config>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001356:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001358:	f7ff feb6 	bl	80010c8 <HAL_GetTick>
 800135c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d008      	beq.n	800137c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2280      	movs	r2, #128	; 0x80
 800136e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e052      	b.n	8001422 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0216 	bic.w	r2, r2, #22
 800138a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	695a      	ldr	r2, [r3, #20]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800139a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d103      	bne.n	80013ac <HAL_DMA_Abort+0x62>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d007      	beq.n	80013bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0208 	bic.w	r2, r2, #8
 80013ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0201 	bic.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013cc:	e013      	b.n	80013f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ce:	f7ff fe7b 	bl	80010c8 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b05      	cmp	r3, #5
 80013da:	d90c      	bls.n	80013f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2220      	movs	r2, #32
 80013e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2203      	movs	r2, #3
 80013e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e015      	b.n	8001422 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1e4      	bne.n	80013ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001408:	223f      	movs	r2, #63	; 0x3f
 800140a:	409a      	lsls	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d004      	beq.n	8001448 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2280      	movs	r2, #128	; 0x80
 8001442:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e00c      	b.n	8001462 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2205      	movs	r2, #5
 800144c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0201 	bic.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001470:	b480      	push	{r7}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	e159      	b.n	8001740 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800148c:	2201      	movs	r2, #1
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	f040 8148 	bne.w	800173a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d005      	beq.n	80014c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d130      	bne.n	8001524 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2203      	movs	r2, #3
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014f8:	2201      	movs	r2, #1
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	f003 0201 	and.w	r2, r3, #1
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b03      	cmp	r3, #3
 800152e:	d017      	beq.n	8001560 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d123      	bne.n	80015b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	08da      	lsrs	r2, r3, #3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3208      	adds	r2, #8
 8001574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	220f      	movs	r2, #15
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	691a      	ldr	r2, [r3, #16]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	08da      	lsrs	r2, r3, #3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3208      	adds	r2, #8
 80015ae:	69b9      	ldr	r1, [r7, #24]
 80015b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	2203      	movs	r2, #3
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0203 	and.w	r2, r3, #3
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80a2 	beq.w	800173a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b57      	ldr	r3, [pc, #348]	; (8001758 <HAL_GPIO_Init+0x2e8>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	4a56      	ldr	r2, [pc, #344]	; (8001758 <HAL_GPIO_Init+0x2e8>)
 8001600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001604:	6453      	str	r3, [r2, #68]	; 0x44
 8001606:	4b54      	ldr	r3, [pc, #336]	; (8001758 <HAL_GPIO_Init+0x2e8>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001612:	4a52      	ldr	r2, [pc, #328]	; (800175c <HAL_GPIO_Init+0x2ec>)
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	3302      	adds	r3, #2
 800161a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	220f      	movs	r2, #15
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a49      	ldr	r2, [pc, #292]	; (8001760 <HAL_GPIO_Init+0x2f0>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d019      	beq.n	8001672 <HAL_GPIO_Init+0x202>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a48      	ldr	r2, [pc, #288]	; (8001764 <HAL_GPIO_Init+0x2f4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d013      	beq.n	800166e <HAL_GPIO_Init+0x1fe>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a47      	ldr	r2, [pc, #284]	; (8001768 <HAL_GPIO_Init+0x2f8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d00d      	beq.n	800166a <HAL_GPIO_Init+0x1fa>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a46      	ldr	r2, [pc, #280]	; (800176c <HAL_GPIO_Init+0x2fc>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d007      	beq.n	8001666 <HAL_GPIO_Init+0x1f6>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a45      	ldr	r2, [pc, #276]	; (8001770 <HAL_GPIO_Init+0x300>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d101      	bne.n	8001662 <HAL_GPIO_Init+0x1f2>
 800165e:	2304      	movs	r3, #4
 8001660:	e008      	b.n	8001674 <HAL_GPIO_Init+0x204>
 8001662:	2307      	movs	r3, #7
 8001664:	e006      	b.n	8001674 <HAL_GPIO_Init+0x204>
 8001666:	2303      	movs	r3, #3
 8001668:	e004      	b.n	8001674 <HAL_GPIO_Init+0x204>
 800166a:	2302      	movs	r3, #2
 800166c:	e002      	b.n	8001674 <HAL_GPIO_Init+0x204>
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_GPIO_Init+0x204>
 8001672:	2300      	movs	r3, #0
 8001674:	69fa      	ldr	r2, [r7, #28]
 8001676:	f002 0203 	and.w	r2, r2, #3
 800167a:	0092      	lsls	r2, r2, #2
 800167c:	4093      	lsls	r3, r2
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001684:	4935      	ldr	r1, [pc, #212]	; (800175c <HAL_GPIO_Init+0x2ec>)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	3302      	adds	r3, #2
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001692:	4b38      	ldr	r3, [pc, #224]	; (8001774 <HAL_GPIO_Init+0x304>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016b6:	4a2f      	ldr	r2, [pc, #188]	; (8001774 <HAL_GPIO_Init+0x304>)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016bc:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <HAL_GPIO_Init+0x304>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e0:	4a24      	ldr	r2, [pc, #144]	; (8001774 <HAL_GPIO_Init+0x304>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016e6:	4b23      	ldr	r3, [pc, #140]	; (8001774 <HAL_GPIO_Init+0x304>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4013      	ands	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800170a:	4a1a      	ldr	r2, [pc, #104]	; (8001774 <HAL_GPIO_Init+0x304>)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <HAL_GPIO_Init+0x304>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001734:	4a0f      	ldr	r2, [pc, #60]	; (8001774 <HAL_GPIO_Init+0x304>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3301      	adds	r3, #1
 800173e:	61fb      	str	r3, [r7, #28]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	2b0f      	cmp	r3, #15
 8001744:	f67f aea2 	bls.w	800148c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3724      	adds	r7, #36	; 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40013800 	.word	0x40013800
 8001760:	40020000 	.word	0x40020000
 8001764:	40020400 	.word	0x40020400
 8001768:	40020800 	.word	0x40020800
 800176c:	40020c00 	.word	0x40020c00
 8001770:	40021000 	.word	0x40021000
 8001774:	40013c00 	.word	0x40013c00

08001778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]
 8001784:	4613      	mov	r3, r2
 8001786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001788:	787b      	ldrb	r3, [r7, #1]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001794:	e003      	b.n	800179e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001796:	887b      	ldrh	r3, [r7, #2]
 8001798:	041a      	lsls	r2, r3, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	619a      	str	r2, [r3, #24]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e12b      	b.n	8001a16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d106      	bne.n	80017d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7fe fffc 	bl	80007d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2224      	movs	r2, #36	; 0x24
 80017dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800180e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001810:	f001 fa20 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 8001814:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4a81      	ldr	r2, [pc, #516]	; (8001a20 <HAL_I2C_Init+0x274>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d807      	bhi.n	8001830 <HAL_I2C_Init+0x84>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4a80      	ldr	r2, [pc, #512]	; (8001a24 <HAL_I2C_Init+0x278>)
 8001824:	4293      	cmp	r3, r2
 8001826:	bf94      	ite	ls
 8001828:	2301      	movls	r3, #1
 800182a:	2300      	movhi	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	e006      	b.n	800183e <HAL_I2C_Init+0x92>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4a7d      	ldr	r2, [pc, #500]	; (8001a28 <HAL_I2C_Init+0x27c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	bf94      	ite	ls
 8001838:	2301      	movls	r3, #1
 800183a:	2300      	movhi	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0e7      	b.n	8001a16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4a78      	ldr	r2, [pc, #480]	; (8001a2c <HAL_I2C_Init+0x280>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	0c9b      	lsrs	r3, r3, #18
 8001850:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	430a      	orrs	r2, r1
 8001864:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a6a      	ldr	r2, [pc, #424]	; (8001a20 <HAL_I2C_Init+0x274>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d802      	bhi.n	8001880 <HAL_I2C_Init+0xd4>
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	3301      	adds	r3, #1
 800187e:	e009      	b.n	8001894 <HAL_I2C_Init+0xe8>
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001886:	fb02 f303 	mul.w	r3, r2, r3
 800188a:	4a69      	ldr	r2, [pc, #420]	; (8001a30 <HAL_I2C_Init+0x284>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	099b      	lsrs	r3, r3, #6
 8001892:	3301      	adds	r3, #1
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	430b      	orrs	r3, r1
 800189a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	495c      	ldr	r1, [pc, #368]	; (8001a20 <HAL_I2C_Init+0x274>)
 80018b0:	428b      	cmp	r3, r1
 80018b2:	d819      	bhi.n	80018e8 <HAL_I2C_Init+0x13c>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1e59      	subs	r1, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c2:	1c59      	adds	r1, r3, #1
 80018c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018c8:	400b      	ands	r3, r1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00a      	beq.n	80018e4 <HAL_I2C_Init+0x138>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1e59      	subs	r1, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018dc:	3301      	adds	r3, #1
 80018de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e2:	e051      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 80018e4:	2304      	movs	r3, #4
 80018e6:	e04f      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d111      	bne.n	8001914 <HAL_I2C_Init+0x168>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1e58      	subs	r0, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	440b      	add	r3, r1
 80018fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001902:	3301      	adds	r3, #1
 8001904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001908:	2b00      	cmp	r3, #0
 800190a:	bf0c      	ite	eq
 800190c:	2301      	moveq	r3, #1
 800190e:	2300      	movne	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	e012      	b.n	800193a <HAL_I2C_Init+0x18e>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1e58      	subs	r0, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6859      	ldr	r1, [r3, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	0099      	lsls	r1, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	fbb0 f3f3 	udiv	r3, r0, r3
 800192a:	3301      	adds	r3, #1
 800192c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf0c      	ite	eq
 8001934:	2301      	moveq	r3, #1
 8001936:	2300      	movne	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_I2C_Init+0x196>
 800193e:	2301      	movs	r3, #1
 8001940:	e022      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10e      	bne.n	8001968 <HAL_I2C_Init+0x1bc>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1e58      	subs	r0, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6859      	ldr	r1, [r3, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	440b      	add	r3, r1
 8001958:	fbb0 f3f3 	udiv	r3, r0, r3
 800195c:	3301      	adds	r3, #1
 800195e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001966:	e00f      	b.n	8001988 <HAL_I2C_Init+0x1dc>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1e58      	subs	r0, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	0099      	lsls	r1, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	fbb0 f3f3 	udiv	r3, r0, r3
 800197e:	3301      	adds	r3, #1
 8001980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001984:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	6809      	ldr	r1, [r1, #0]
 800198c:	4313      	orrs	r3, r2
 800198e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69da      	ldr	r2, [r3, #28]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6911      	ldr	r1, [r2, #16]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68d2      	ldr	r2, [r2, #12]
 80019c2:	4311      	orrs	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	430b      	orrs	r3, r1
 80019ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2220      	movs	r2, #32
 8001a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	000186a0 	.word	0x000186a0
 8001a24:	001e847f 	.word	0x001e847f
 8001a28:	003d08ff 	.word	0x003d08ff
 8001a2c:	431bde83 	.word	0x431bde83
 8001a30:	10624dd3 	.word	0x10624dd3

08001a34 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e128      	b.n	8001c98 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d109      	bne.n	8001a66 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a90      	ldr	r2, [pc, #576]	; (8001ca0 <HAL_I2S_Init+0x26c>)
 8001a5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7fe ff5b 	bl	800091c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2202      	movs	r2, #2
 8001a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a7c:	f023 030f 	bic.w	r3, r3, #15
 8001a80:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2202      	movs	r2, #2
 8001a88:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d060      	beq.n	8001b54 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d102      	bne.n	8001aa0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001a9a:	2310      	movs	r3, #16
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e001      	b.n	8001aa4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001aa0:	2320      	movs	r3, #32
 8001aa2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b20      	cmp	r3, #32
 8001aaa:	d802      	bhi.n	8001ab2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f001 f9e6 	bl	8002e84 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ab8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ac2:	d125      	bne.n	8001b10 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d010      	beq.n	8001aee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	461a      	mov	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae8:	3305      	adds	r3, #5
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	e01f      	b.n	8001b2e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	461a      	mov	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	3305      	adds	r3, #5
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	e00e      	b.n	8001b2e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	461a      	mov	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2a:	3305      	adds	r3, #5
 8001b2c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4a5c      	ldr	r2, [pc, #368]	; (8001ca4 <HAL_I2S_Init+0x270>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	08db      	lsrs	r3, r3, #3
 8001b38:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	085b      	lsrs	r3, r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	e003      	b.n	8001b5c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001b54:	2302      	movs	r3, #2
 8001b56:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d902      	bls.n	8001b68 <HAL_I2S_Init+0x134>
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	2bff      	cmp	r3, #255	; 0xff
 8001b66:	d907      	bls.n	8001b78 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6c:	f043 0210 	orr.w	r2, r3, #16
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e08f      	b.n	8001c98 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	ea42 0103 	orr.w	r1, r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b96:	f023 030f 	bic.w	r3, r3, #15
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6851      	ldr	r1, [r2, #4]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6892      	ldr	r2, [r2, #8]
 8001ba2:	4311      	orrs	r1, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	68d2      	ldr	r2, [r2, #12]
 8001ba8:	4311      	orrs	r1, r2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6992      	ldr	r2, [r2, #24]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d161      	bne.n	8001c88 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a38      	ldr	r2, [pc, #224]	; (8001ca8 <HAL_I2S_Init+0x274>)
 8001bc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a37      	ldr	r2, [pc, #220]	; (8001cac <HAL_I2S_Init+0x278>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d101      	bne.n	8001bd8 <HAL_I2S_Init+0x1a4>
 8001bd4:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <HAL_I2S_Init+0x27c>)
 8001bd6:	e001      	b.n	8001bdc <HAL_I2S_Init+0x1a8>
 8001bd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	4932      	ldr	r1, [pc, #200]	; (8001cac <HAL_I2S_Init+0x278>)
 8001be4:	428a      	cmp	r2, r1
 8001be6:	d101      	bne.n	8001bec <HAL_I2S_Init+0x1b8>
 8001be8:	4a31      	ldr	r2, [pc, #196]	; (8001cb0 <HAL_I2S_Init+0x27c>)
 8001bea:	e001      	b.n	8001bf0 <HAL_I2S_Init+0x1bc>
 8001bec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001bf0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001bf4:	f023 030f 	bic.w	r3, r3, #15
 8001bf8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a2b      	ldr	r2, [pc, #172]	; (8001cac <HAL_I2S_Init+0x278>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d101      	bne.n	8001c08 <HAL_I2S_Init+0x1d4>
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <HAL_I2S_Init+0x27c>)
 8001c06:	e001      	b.n	8001c0c <HAL_I2S_Init+0x1d8>
 8001c08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a25      	ldr	r2, [pc, #148]	; (8001cac <HAL_I2S_Init+0x278>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d101      	bne.n	8001c1e <HAL_I2S_Init+0x1ea>
 8001c1a:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <HAL_I2S_Init+0x27c>)
 8001c1c:	e001      	b.n	8001c22 <HAL_I2S_Init+0x1ee>
 8001c1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c2e:	d003      	beq.n	8001c38 <HAL_I2S_Init+0x204>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d103      	bne.n	8001c40 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	e001      	b.n	8001c44 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	897b      	ldrh	r3, [r7, #10]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c70:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <HAL_I2S_Init+0x278>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d101      	bne.n	8001c80 <HAL_I2S_Init+0x24c>
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <HAL_I2S_Init+0x27c>)
 8001c7e:	e001      	b.n	8001c84 <HAL_I2S_Init+0x250>
 8001c80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c84:	897a      	ldrh	r2, [r7, #10]
 8001c86:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3720      	adds	r7, #32
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	08001dab 	.word	0x08001dab
 8001ca4:	cccccccd 	.word	0xcccccccd
 8001ca8:	08001ec1 	.word	0x08001ec1
 8001cac:	40003800 	.word	0x40003800
 8001cb0:	40003400 	.word	0x40003400

08001cb4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	881a      	ldrh	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	1c9a      	adds	r2, r3, #2
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10e      	bne.n	8001d44 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d34:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ffb8 	bl	8001cb4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	b292      	uxth	r2, r2
 8001d60:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d66:	1c9a      	adds	r2, r3, #2
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10e      	bne.n	8001da2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d92:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ff93 	bl	8001cc8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d13a      	bne.n	8001e3c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d109      	bne.n	8001de4 <I2S_IRQHandler+0x3a>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dda:	2b40      	cmp	r3, #64	; 0x40
 8001ddc:	d102      	bne.n	8001de4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ffb4 	bl	8001d4c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dea:	2b40      	cmp	r3, #64	; 0x40
 8001dec:	d126      	bne.n	8001e3c <I2S_IRQHandler+0x92>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d11f      	bne.n	8001e3c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f043 0202 	orr.w	r2, r3, #2
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ff50 	bl	8001cdc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d136      	bne.n	8001eb6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d109      	bne.n	8001e66 <I2S_IRQHandler+0xbc>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5c:	2b80      	cmp	r3, #128	; 0x80
 8001e5e:	d102      	bne.n	8001e66 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ff45 	bl	8001cf0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d122      	bne.n	8001eb6 <I2S_IRQHandler+0x10c>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	d11b      	bne.n	8001eb6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e8c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea8:	f043 0204 	orr.w	r2, r3, #4
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff13 	bl	8001cdc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a92      	ldr	r2, [pc, #584]	; (8002120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d101      	bne.n	8001ede <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001eda:	4b92      	ldr	r3, [pc, #584]	; (8002124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001edc:	e001      	b.n	8001ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001ede:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a8b      	ldr	r2, [pc, #556]	; (8002120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d101      	bne.n	8001efc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001ef8:	4b8a      	ldr	r3, [pc, #552]	; (8002124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001efa:	e001      	b.n	8001f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f0c:	d004      	beq.n	8001f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f040 8099 	bne.w	800204a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d107      	bne.n	8001f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f925 	bl	800217c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d107      	bne.n	8001f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f9c8 	bl	80022dc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f52:	2b40      	cmp	r3, #64	; 0x40
 8001f54:	d13a      	bne.n	8001fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	f003 0320 	and.w	r3, r3, #32
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d035      	beq.n	8001fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a6e      	ldr	r2, [pc, #440]	; (8002120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001f6a:	4b6e      	ldr	r3, [pc, #440]	; (8002124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f6c:	e001      	b.n	8001f72 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001f6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4969      	ldr	r1, [pc, #420]	; (8002120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f7a:	428b      	cmp	r3, r1
 8001f7c:	d101      	bne.n	8001f82 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001f7e:	4b69      	ldr	r3, [pc, #420]	; (8002124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f80:	e001      	b.n	8001f86 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001f82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f8a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f9a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f043 0202 	orr.w	r2, r3, #2
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fe88 	bl	8001cdc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	f040 80c3 	bne.w	800215e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 80bd 	beq.w	800215e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ff2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a49      	ldr	r2, [pc, #292]	; (8002120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d101      	bne.n	8002002 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001ffe:	4b49      	ldr	r3, [pc, #292]	; (8002124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002000:	e001      	b.n	8002006 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002002:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4944      	ldr	r1, [pc, #272]	; (8002120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800200e:	428b      	cmp	r3, r1
 8002010:	d101      	bne.n	8002016 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002012:	4b44      	ldr	r3, [pc, #272]	; (8002124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002014:	e001      	b.n	800201a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002016:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800201a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800201e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f043 0204 	orr.w	r2, r3, #4
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff fe4a 	bl	8001cdc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002048:	e089      	b.n	800215e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b02      	cmp	r3, #2
 8002052:	d107      	bne.n	8002064 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f8be 	bl	80021e0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b01      	cmp	r3, #1
 800206c:	d107      	bne.n	800207e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f8fd 	bl	8002278 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002084:	2b40      	cmp	r3, #64	; 0x40
 8002086:	d12f      	bne.n	80020e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	2b00      	cmp	r3, #0
 8002090:	d02a      	beq.n	80020e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020a0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a1e      	ldr	r2, [pc, #120]	; (8002120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d101      	bne.n	80020b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020ae:	e001      	b.n	80020b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80020b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4919      	ldr	r1, [pc, #100]	; (8002120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020bc:	428b      	cmp	r3, r1
 80020be:	d101      	bne.n	80020c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80020c0:	4b18      	ldr	r3, [pc, #96]	; (8002124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020c2:	e001      	b.n	80020c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80020c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	f043 0202 	orr.w	r2, r3, #2
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff fdfa 	bl	8001cdc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d136      	bne.n	8002160 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d031      	beq.n	8002160 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a07      	ldr	r2, [pc, #28]	; (8002120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d101      	bne.n	800210a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002108:	e001      	b.n	800210e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800210a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4902      	ldr	r1, [pc, #8]	; (8002120 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002116:	428b      	cmp	r3, r1
 8002118:	d106      	bne.n	8002128 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800211a:	4b02      	ldr	r3, [pc, #8]	; (8002124 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800211c:	e006      	b.n	800212c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800211e:	bf00      	nop
 8002120:	40003800 	.word	0x40003800
 8002124:	40003400 	.word	0x40003400
 8002128:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800212c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002130:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002140:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	f043 0204 	orr.w	r2, r3, #4
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff fdc0 	bl	8001cdc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800215c:	e000      	b.n	8002160 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800215e:	bf00      	nop
}
 8002160:	bf00      	nop
 8002162:	3720      	adds	r7, #32
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	1c99      	adds	r1, r3, #2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6251      	str	r1, [r2, #36]	; 0x24
 800218e:	881a      	ldrh	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219a:	b29b      	uxth	r3, r3
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d113      	bne.n	80021d6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d106      	bne.n	80021d6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ffc9 	bl	8002168 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	1c99      	adds	r1, r3, #2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6251      	str	r1, [r2, #36]	; 0x24
 80021f2:	8819      	ldrh	r1, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1d      	ldr	r2, [pc, #116]	; (8002270 <I2SEx_TxISR_I2SExt+0x90>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d101      	bne.n	8002202 <I2SEx_TxISR_I2SExt+0x22>
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <I2SEx_TxISR_I2SExt+0x94>)
 8002200:	e001      	b.n	8002206 <I2SEx_TxISR_I2SExt+0x26>
 8002202:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002206:	460a      	mov	r2, r1
 8002208:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220e:	b29b      	uxth	r3, r3
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221c:	b29b      	uxth	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d121      	bne.n	8002266 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a12      	ldr	r2, [pc, #72]	; (8002270 <I2SEx_TxISR_I2SExt+0x90>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d101      	bne.n	8002230 <I2SEx_TxISR_I2SExt+0x50>
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <I2SEx_TxISR_I2SExt+0x94>)
 800222e:	e001      	b.n	8002234 <I2SEx_TxISR_I2SExt+0x54>
 8002230:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	490d      	ldr	r1, [pc, #52]	; (8002270 <I2SEx_TxISR_I2SExt+0x90>)
 800223c:	428b      	cmp	r3, r1
 800223e:	d101      	bne.n	8002244 <I2SEx_TxISR_I2SExt+0x64>
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <I2SEx_TxISR_I2SExt+0x94>)
 8002242:	e001      	b.n	8002248 <I2SEx_TxISR_I2SExt+0x68>
 8002244:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002248:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800224c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d106      	bne.n	8002266 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff81 	bl	8002168 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40003800 	.word	0x40003800
 8002274:	40003400 	.word	0x40003400

08002278 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68d8      	ldr	r0, [r3, #12]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	1c99      	adds	r1, r3, #2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002290:	b282      	uxth	r2, r0
 8002292:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002298:	b29b      	uxth	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d113      	bne.n	80022d4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022ba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ff4a 	bl	8002168 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a20      	ldr	r2, [pc, #128]	; (800236c <I2SEx_RxISR_I2SExt+0x90>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d101      	bne.n	80022f2 <I2SEx_RxISR_I2SExt+0x16>
 80022ee:	4b20      	ldr	r3, [pc, #128]	; (8002370 <I2SEx_RxISR_I2SExt+0x94>)
 80022f0:	e001      	b.n	80022f6 <I2SEx_RxISR_I2SExt+0x1a>
 80022f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022f6:	68d8      	ldr	r0, [r3, #12]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	1c99      	adds	r1, r3, #2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002302:	b282      	uxth	r2, r0
 8002304:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002318:	b29b      	uxth	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d121      	bne.n	8002362 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a12      	ldr	r2, [pc, #72]	; (800236c <I2SEx_RxISR_I2SExt+0x90>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d101      	bne.n	800232c <I2SEx_RxISR_I2SExt+0x50>
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <I2SEx_RxISR_I2SExt+0x94>)
 800232a:	e001      	b.n	8002330 <I2SEx_RxISR_I2SExt+0x54>
 800232c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	490d      	ldr	r1, [pc, #52]	; (800236c <I2SEx_RxISR_I2SExt+0x90>)
 8002338:	428b      	cmp	r3, r1
 800233a:	d101      	bne.n	8002340 <I2SEx_RxISR_I2SExt+0x64>
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <I2SEx_RxISR_I2SExt+0x94>)
 800233e:	e001      	b.n	8002344 <I2SEx_RxISR_I2SExt+0x68>
 8002340:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002344:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002348:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d106      	bne.n	8002362 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ff03 	bl	8002168 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40003800 	.word	0x40003800
 8002370:	40003400 	.word	0x40003400

08002374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e267      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d075      	beq.n	800247e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002392:	4b88      	ldr	r3, [pc, #544]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b04      	cmp	r3, #4
 800239c:	d00c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239e:	4b85      	ldr	r3, [pc, #532]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d112      	bne.n	80023d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023aa:	4b82      	ldr	r3, [pc, #520]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023b6:	d10b      	bne.n	80023d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	4b7e      	ldr	r3, [pc, #504]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d05b      	beq.n	800247c <HAL_RCC_OscConfig+0x108>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d157      	bne.n	800247c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e242      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d8:	d106      	bne.n	80023e8 <HAL_RCC_OscConfig+0x74>
 80023da:	4b76      	ldr	r3, [pc, #472]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a75      	ldr	r2, [pc, #468]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e01d      	b.n	8002424 <HAL_RCC_OscConfig+0xb0>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0x98>
 80023f2:	4b70      	ldr	r3, [pc, #448]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a6f      	ldr	r2, [pc, #444]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b6d      	ldr	r3, [pc, #436]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a6c      	ldr	r2, [pc, #432]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e00b      	b.n	8002424 <HAL_RCC_OscConfig+0xb0>
 800240c:	4b69      	ldr	r3, [pc, #420]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a68      	ldr	r2, [pc, #416]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b66      	ldr	r3, [pc, #408]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a65      	ldr	r2, [pc, #404]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 800241e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d013      	beq.n	8002454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7fe fe4c 	bl	80010c8 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002434:	f7fe fe48 	bl	80010c8 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e207      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	4b5b      	ldr	r3, [pc, #364]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0xc0>
 8002452:	e014      	b.n	800247e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7fe fe38 	bl	80010c8 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800245c:	f7fe fe34 	bl	80010c8 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e1f3      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246e:	4b51      	ldr	r3, [pc, #324]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0xe8>
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d063      	beq.n	8002552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800248a:	4b4a      	ldr	r3, [pc, #296]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00b      	beq.n	80024ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002496:	4b47      	ldr	r3, [pc, #284]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d11c      	bne.n	80024dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024a2:	4b44      	ldr	r3, [pc, #272]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d116      	bne.n	80024dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ae:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_RCC_OscConfig+0x152>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d001      	beq.n	80024c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e1c7      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c6:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4937      	ldr	r1, [pc, #220]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024da:	e03a      	b.n	8002552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d020      	beq.n	8002526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e4:	4b34      	ldr	r3, [pc, #208]	; (80025b8 <HAL_RCC_OscConfig+0x244>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7fe fded 	bl	80010c8 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f2:	f7fe fde9 	bl	80010c8 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e1a8      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002504:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002510:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4925      	ldr	r1, [pc, #148]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002520:	4313      	orrs	r3, r2
 8002522:	600b      	str	r3, [r1, #0]
 8002524:	e015      	b.n	8002552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002526:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_RCC_OscConfig+0x244>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe fdcc 	bl	80010c8 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002534:	f7fe fdc8 	bl	80010c8 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e187      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002546:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d036      	beq.n	80025cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d016      	beq.n	8002594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002566:	4b15      	ldr	r3, [pc, #84]	; (80025bc <HAL_RCC_OscConfig+0x248>)
 8002568:	2201      	movs	r2, #1
 800256a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256c:	f7fe fdac 	bl	80010c8 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002574:	f7fe fda8 	bl	80010c8 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e167      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x200>
 8002592:	e01b      	b.n	80025cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <HAL_RCC_OscConfig+0x248>)
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259a:	f7fe fd95 	bl	80010c8 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a0:	e00e      	b.n	80025c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a2:	f7fe fd91 	bl	80010c8 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d907      	bls.n	80025c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e150      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
 80025b4:	40023800 	.word	0x40023800
 80025b8:	42470000 	.word	0x42470000
 80025bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c0:	4b88      	ldr	r3, [pc, #544]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80025c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1ea      	bne.n	80025a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8097 	beq.w	8002708 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025de:	4b81      	ldr	r3, [pc, #516]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10f      	bne.n	800260a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	4b7d      	ldr	r3, [pc, #500]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	4a7c      	ldr	r2, [pc, #496]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80025f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f8:	6413      	str	r3, [r2, #64]	; 0x40
 80025fa:	4b7a      	ldr	r3, [pc, #488]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002606:	2301      	movs	r3, #1
 8002608:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260a:	4b77      	ldr	r3, [pc, #476]	; (80027e8 <HAL_RCC_OscConfig+0x474>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d118      	bne.n	8002648 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002616:	4b74      	ldr	r3, [pc, #464]	; (80027e8 <HAL_RCC_OscConfig+0x474>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a73      	ldr	r2, [pc, #460]	; (80027e8 <HAL_RCC_OscConfig+0x474>)
 800261c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002622:	f7fe fd51 	bl	80010c8 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262a:	f7fe fd4d 	bl	80010c8 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e10c      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263c:	4b6a      	ldr	r3, [pc, #424]	; (80027e8 <HAL_RCC_OscConfig+0x474>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d106      	bne.n	800265e <HAL_RCC_OscConfig+0x2ea>
 8002650:	4b64      	ldr	r3, [pc, #400]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002654:	4a63      	ldr	r2, [pc, #396]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6713      	str	r3, [r2, #112]	; 0x70
 800265c:	e01c      	b.n	8002698 <HAL_RCC_OscConfig+0x324>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b05      	cmp	r3, #5
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0x30c>
 8002666:	4b5f      	ldr	r3, [pc, #380]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266a:	4a5e      	ldr	r2, [pc, #376]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	6713      	str	r3, [r2, #112]	; 0x70
 8002672:	4b5c      	ldr	r3, [pc, #368]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	4a5b      	ldr	r2, [pc, #364]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6713      	str	r3, [r2, #112]	; 0x70
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0x324>
 8002680:	4b58      	ldr	r3, [pc, #352]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002684:	4a57      	ldr	r2, [pc, #348]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002686:	f023 0301 	bic.w	r3, r3, #1
 800268a:	6713      	str	r3, [r2, #112]	; 0x70
 800268c:	4b55      	ldr	r3, [pc, #340]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002690:	4a54      	ldr	r2, [pc, #336]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002692:	f023 0304 	bic.w	r3, r3, #4
 8002696:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d015      	beq.n	80026cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a0:	f7fe fd12 	bl	80010c8 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a6:	e00a      	b.n	80026be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a8:	f7fe fd0e 	bl	80010c8 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e0cb      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026be:	4b49      	ldr	r3, [pc, #292]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0ee      	beq.n	80026a8 <HAL_RCC_OscConfig+0x334>
 80026ca:	e014      	b.n	80026f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026cc:	f7fe fcfc 	bl	80010c8 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d4:	f7fe fcf8 	bl	80010c8 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e0b5      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ea:	4b3e      	ldr	r3, [pc, #248]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1ee      	bne.n	80026d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026f6:	7dfb      	ldrb	r3, [r7, #23]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d105      	bne.n	8002708 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fc:	4b39      	ldr	r3, [pc, #228]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	4a38      	ldr	r2, [pc, #224]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002706:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80a1 	beq.w	8002854 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002712:	4b34      	ldr	r3, [pc, #208]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b08      	cmp	r3, #8
 800271c:	d05c      	beq.n	80027d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d141      	bne.n	80027aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002726:	4b31      	ldr	r3, [pc, #196]	; (80027ec <HAL_RCC_OscConfig+0x478>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7fe fccc 	bl	80010c8 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002734:	f7fe fcc8 	bl	80010c8 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e087      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002746:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69da      	ldr	r2, [r3, #28]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	019b      	lsls	r3, r3, #6
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	085b      	lsrs	r3, r3, #1
 800276a:	3b01      	subs	r3, #1
 800276c:	041b      	lsls	r3, r3, #16
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	061b      	lsls	r3, r3, #24
 8002776:	491b      	ldr	r1, [pc, #108]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002778:	4313      	orrs	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_RCC_OscConfig+0x478>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002782:	f7fe fca1 	bl	80010c8 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278a:	f7fe fc9d 	bl	80010c8 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e05c      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x416>
 80027a8:	e054      	b.n	8002854 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <HAL_RCC_OscConfig+0x478>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7fe fc8a 	bl	80010c8 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b8:	f7fe fc86 	bl	80010c8 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e045      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x444>
 80027d6:	e03d      	b.n	8002854 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d107      	bne.n	80027f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e038      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40007000 	.word	0x40007000
 80027ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <HAL_RCC_OscConfig+0x4ec>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d028      	beq.n	8002850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002808:	429a      	cmp	r2, r3
 800280a:	d121      	bne.n	8002850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	429a      	cmp	r2, r3
 8002818:	d11a      	bne.n	8002850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002820:	4013      	ands	r3, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002826:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002828:	4293      	cmp	r3, r2
 800282a:	d111      	bne.n	8002850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	085b      	lsrs	r3, r3, #1
 8002838:	3b01      	subs	r3, #1
 800283a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d107      	bne.n	8002850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800

08002864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0cc      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002878:	4b68      	ldr	r3, [pc, #416]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d90c      	bls.n	80028a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b65      	ldr	r3, [pc, #404]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0b8      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d020      	beq.n	80028ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b8:	4b59      	ldr	r3, [pc, #356]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	4a58      	ldr	r2, [pc, #352]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d0:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	4a52      	ldr	r2, [pc, #328]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028dc:	4b50      	ldr	r3, [pc, #320]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	494d      	ldr	r1, [pc, #308]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d044      	beq.n	8002984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	4b47      	ldr	r3, [pc, #284]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d119      	bne.n	8002942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e07f      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d003      	beq.n	8002922 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800291e:	2b03      	cmp	r3, #3
 8002920:	d107      	bne.n	8002932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002922:	4b3f      	ldr	r3, [pc, #252]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e06f      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002932:	4b3b      	ldr	r3, [pc, #236]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e067      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002942:	4b37      	ldr	r3, [pc, #220]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f023 0203 	bic.w	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4934      	ldr	r1, [pc, #208]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	4313      	orrs	r3, r2
 8002952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002954:	f7fe fbb8 	bl	80010c8 <HAL_GetTick>
 8002958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295a:	e00a      	b.n	8002972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800295c:	f7fe fbb4 	bl	80010c8 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	; 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e04f      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002972:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 020c 	and.w	r2, r3, #12
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	429a      	cmp	r2, r3
 8002982:	d1eb      	bne.n	800295c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002984:	4b25      	ldr	r3, [pc, #148]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d20c      	bcs.n	80029ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b22      	ldr	r3, [pc, #136]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e032      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4916      	ldr	r1, [pc, #88]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d009      	beq.n	80029ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	490e      	ldr	r1, [pc, #56]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ea:	f000 f821 	bl	8002a30 <HAL_RCC_GetSysClockFreq>
 80029ee:	4602      	mov	r2, r0
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	490a      	ldr	r1, [pc, #40]	; (8002a24 <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	5ccb      	ldrb	r3, [r1, r3]
 80029fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002a02:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe fb18 	bl	8001040 <HAL_InitTick>

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023c00 	.word	0x40023c00
 8002a20:	40023800 	.word	0x40023800
 8002a24:	080049dc 	.word	0x080049dc
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	20000004 	.word	0x20000004

08002a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a34:	b094      	sub	sp, #80	; 0x50
 8002a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a40:	2300      	movs	r3, #0
 8002a42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a48:	4b79      	ldr	r3, [pc, #484]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d00d      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x40>
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	f200 80e1 	bhi.w	8002c1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x34>
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d003      	beq.n	8002a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a62:	e0db      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a64:	4b73      	ldr	r3, [pc, #460]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a68:	e0db      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a6a:	4b73      	ldr	r3, [pc, #460]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a6e:	e0d8      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a70:	4b6f      	ldr	r3, [pc, #444]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a7a:	4b6d      	ldr	r3, [pc, #436]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d063      	beq.n	8002b4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a86:	4b6a      	ldr	r3, [pc, #424]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	099b      	lsrs	r3, r3, #6
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a98:	633b      	str	r3, [r7, #48]	; 0x30
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002aa2:	4622      	mov	r2, r4
 8002aa4:	462b      	mov	r3, r5
 8002aa6:	f04f 0000 	mov.w	r0, #0
 8002aaa:	f04f 0100 	mov.w	r1, #0
 8002aae:	0159      	lsls	r1, r3, #5
 8002ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ab4:	0150      	lsls	r0, r2, #5
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4621      	mov	r1, r4
 8002abc:	1a51      	subs	r1, r2, r1
 8002abe:	6139      	str	r1, [r7, #16]
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ad4:	4659      	mov	r1, fp
 8002ad6:	018b      	lsls	r3, r1, #6
 8002ad8:	4651      	mov	r1, sl
 8002ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ade:	4651      	mov	r1, sl
 8002ae0:	018a      	lsls	r2, r1, #6
 8002ae2:	4651      	mov	r1, sl
 8002ae4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ae8:	4659      	mov	r1, fp
 8002aea:	eb63 0901 	sbc.w	r9, r3, r1
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b02:	4690      	mov	r8, r2
 8002b04:	4699      	mov	r9, r3
 8002b06:	4623      	mov	r3, r4
 8002b08:	eb18 0303 	adds.w	r3, r8, r3
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	462b      	mov	r3, r5
 8002b10:	eb49 0303 	adc.w	r3, r9, r3
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b22:	4629      	mov	r1, r5
 8002b24:	024b      	lsls	r3, r1, #9
 8002b26:	4621      	mov	r1, r4
 8002b28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	024a      	lsls	r2, r1, #9
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b36:	2200      	movs	r2, #0
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b40:	f7fd fb9e 	bl	8000280 <__aeabi_uldivmod>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4613      	mov	r3, r2
 8002b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b4c:	e058      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4e:	4b38      	ldr	r3, [pc, #224]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	099b      	lsrs	r3, r3, #6
 8002b54:	2200      	movs	r2, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	4611      	mov	r1, r2
 8002b5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b5e:	623b      	str	r3, [r7, #32]
 8002b60:	2300      	movs	r3, #0
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
 8002b64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b68:	4642      	mov	r2, r8
 8002b6a:	464b      	mov	r3, r9
 8002b6c:	f04f 0000 	mov.w	r0, #0
 8002b70:	f04f 0100 	mov.w	r1, #0
 8002b74:	0159      	lsls	r1, r3, #5
 8002b76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b7a:	0150      	lsls	r0, r2, #5
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4641      	mov	r1, r8
 8002b82:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b86:	4649      	mov	r1, r9
 8002b88:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ba0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ba4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	00eb      	lsls	r3, r5, #3
 8002bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bb6:	00e2      	lsls	r2, r4, #3
 8002bb8:	4614      	mov	r4, r2
 8002bba:	461d      	mov	r5, r3
 8002bbc:	4643      	mov	r3, r8
 8002bbe:	18e3      	adds	r3, r4, r3
 8002bc0:	603b      	str	r3, [r7, #0]
 8002bc2:	464b      	mov	r3, r9
 8002bc4:	eb45 0303 	adc.w	r3, r5, r3
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	028b      	lsls	r3, r1, #10
 8002bda:	4621      	mov	r1, r4
 8002bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002be0:	4621      	mov	r1, r4
 8002be2:	028a      	lsls	r2, r1, #10
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bea:	2200      	movs	r2, #0
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	61fa      	str	r2, [r7, #28]
 8002bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf4:	f7fd fb44 	bl	8000280 <__aeabi_uldivmod>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c1a:	e002      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3750      	adds	r7, #80	; 0x50
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800
 8002c34:	00f42400 	.word	0x00f42400
 8002c38:	007a1200 	.word	0x007a1200

08002c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c42:	681b      	ldr	r3, [r3, #0]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000000 	.word	0x20000000

08002c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c58:	f7ff fff0 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	0a9b      	lsrs	r3, r3, #10
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	4903      	ldr	r1, [pc, #12]	; (8002c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c6a:	5ccb      	ldrb	r3, [r1, r3]
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40023800 	.word	0x40023800
 8002c78:	080049ec 	.word	0x080049ec

08002c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c80:	f7ff ffdc 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 8002c84:	4602      	mov	r2, r0
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	0b5b      	lsrs	r3, r3, #13
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	4903      	ldr	r1, [pc, #12]	; (8002ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c92:	5ccb      	ldrb	r3, [r1, r3]
 8002c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	080049ec 	.word	0x080049ec

08002ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d038      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ccc:	4b68      	ldr	r3, [pc, #416]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cd2:	f7fe f9f9 	bl	80010c8 <HAL_GetTick>
 8002cd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002cda:	f7fe f9f5 	bl	80010c8 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e0bd      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cec:	4b61      	ldr	r3, [pc, #388]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1f0      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	019b      	lsls	r3, r3, #6
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	071b      	lsls	r3, r3, #28
 8002d0a:	495a      	ldr	r1, [pc, #360]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d12:	4b57      	ldr	r3, [pc, #348]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d18:	f7fe f9d6 	bl	80010c8 <HAL_GetTick>
 8002d1c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d20:	f7fe f9d2 	bl	80010c8 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e09a      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d32:	4b50      	ldr	r3, [pc, #320]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 8083 	beq.w	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	4b48      	ldr	r3, [pc, #288]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	4a47      	ldr	r2, [pc, #284]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5c:	4b45      	ldr	r3, [pc, #276]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d68:	4b43      	ldr	r3, [pc, #268]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a42      	ldr	r2, [pc, #264]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d72:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d74:	f7fe f9a8 	bl	80010c8 <HAL_GetTick>
 8002d78:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d7c:	f7fe f9a4 	bl	80010c8 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e06c      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d8e:	4b3a      	ldr	r3, [pc, #232]	; (8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d9a:	4b36      	ldr	r3, [pc, #216]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d02f      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d028      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002db8:	4b2e      	ldr	r3, [pc, #184]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dc2:	4b2e      	ldr	r3, [pc, #184]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dc8:	4b2c      	ldr	r3, [pc, #176]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002dce:	4a29      	ldr	r2, [pc, #164]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dd4:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d114      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fe f972 	bl	80010c8 <HAL_GetTick>
 8002de4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de6:	e00a      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de8:	f7fe f96e 	bl	80010c8 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e034      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfe:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0ee      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e16:	d10d      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002e18:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2c:	4911      	ldr	r1, [pc, #68]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
 8002e32:	e005      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e3e:	6093      	str	r3, [r2, #8]
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4c:	4909      	ldr	r1, [pc, #36]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	7d1a      	ldrb	r2, [r3, #20]
 8002e62:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002e64:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	42470068 	.word	0x42470068
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	42470e40 	.word	0x42470e40
 8002e80:	424711e0 	.word	0x424711e0

08002e84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d140      	bne.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d131      	bne.n	8002f1c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002eb8:	4b1f      	ldr	r3, [pc, #124]	; (8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002eba:	617b      	str	r3, [r7, #20]
          break;
 8002ebc:	e031      	b.n	8002f22 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ebe:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eca:	d109      	bne.n	8002ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ed6:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	e008      	b.n	8002ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002ee0:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ee6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eea:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef0:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002ef2:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef8:	099b      	lsrs	r3, r3, #6
 8002efa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	fb02 f303 	mul.w	r3, r2, r3
 8002f04:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002f06:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f0c:	0f1b      	lsrs	r3, r3, #28
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f18:	617b      	str	r3, [r7, #20]
          break;
 8002f1a:	e002      	b.n	8002f22 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
          break;
 8002f20:	bf00      	nop
        }
      }
      break;
 8002f22:	bf00      	nop
    }
  }
  return frequency;
 8002f24:	697b      	ldr	r3, [r7, #20]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	371c      	adds	r7, #28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40023800 	.word	0x40023800
 8002f38:	00bb8000 	.word	0x00bb8000
 8002f3c:	007a1200 	.word	0x007a1200
 8002f40:	00f42400 	.word	0x00f42400

08002f44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e07b      	b.n	800304e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d108      	bne.n	8002f70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f66:	d009      	beq.n	8002f7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	61da      	str	r2, [r3, #28]
 8002f6e:	e005      	b.n	8002f7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fd fe88 	bl	8000cac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003000:	ea42 0103 	orr.w	r1, r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	f003 0104 	and.w	r1, r3, #4
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	f003 0210 	and.w	r2, r3, #16
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800303c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e03f      	b.n	80030e8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d106      	bne.n	8003082 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7fd ff2b 	bl	8000ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2224      	movs	r2, #36	; 0x24
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003098:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fd7a 	bl	8003b94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08a      	sub	sp, #40	; 0x28
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	4613      	mov	r3, r2
 80030fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b20      	cmp	r3, #32
 800310e:	d17c      	bne.n	800320a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <HAL_UART_Transmit+0x2c>
 8003116:	88fb      	ldrh	r3, [r7, #6]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e075      	b.n	800320c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_UART_Transmit+0x3e>
 800312a:	2302      	movs	r3, #2
 800312c:	e06e      	b.n	800320c <HAL_UART_Transmit+0x11c>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2221      	movs	r2, #33	; 0x21
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003144:	f7fd ffc0 	bl	80010c8 <HAL_GetTick>
 8003148:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	88fa      	ldrh	r2, [r7, #6]
 800314e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	88fa      	ldrh	r2, [r7, #6]
 8003154:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800315e:	d108      	bne.n	8003172 <HAL_UART_Transmit+0x82>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d104      	bne.n	8003172 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003168:	2300      	movs	r3, #0
 800316a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	61bb      	str	r3, [r7, #24]
 8003170:	e003      	b.n	800317a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003182:	e02a      	b.n	80031da <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2200      	movs	r2, #0
 800318c:	2180      	movs	r1, #128	; 0x80
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 faf8 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e036      	b.n	800320c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10b      	bne.n	80031bc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031b2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	3302      	adds	r3, #2
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	e007      	b.n	80031cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	781a      	ldrb	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3301      	adds	r3, #1
 80031ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1cf      	bne.n	8003184 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2200      	movs	r2, #0
 80031ec:	2140      	movs	r1, #64	; 0x40
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fac8 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e006      	b.n	800320c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	e000      	b.n	800320c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800320a:	2302      	movs	r3, #2
  }
}
 800320c:	4618      	mov	r0, r3
 800320e:	3720      	adds	r7, #32
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b0ba      	sub	sp, #232	; 0xe8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800323a:	2300      	movs	r3, #0
 800323c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003240:	2300      	movs	r3, #0
 8003242:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003252:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10f      	bne.n	800327a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800325a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <HAL_UART_IRQHandler+0x66>
 8003266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fbd3 	bl	8003a1e <UART_Receive_IT>
      return;
 8003278:	e256      	b.n	8003728 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800327a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 80de 	beq.w	8003440 <HAL_UART_IRQHandler+0x22c>
 8003284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d106      	bne.n	800329e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003294:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80d1 	beq.w	8003440 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800329e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <HAL_UART_IRQHandler+0xae>
 80032aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f043 0201 	orr.w	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_UART_IRQHandler+0xd2>
 80032ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f043 0202 	orr.w	r2, r3, #2
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_UART_IRQHandler+0xf6>
 80032f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f043 0204 	orr.w	r2, r3, #4
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800330a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d011      	beq.n	800333a <HAL_UART_IRQHandler+0x126>
 8003316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b00      	cmp	r3, #0
 8003320:	d105      	bne.n	800332e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f043 0208 	orr.w	r2, r3, #8
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 81ed 	beq.w	800371e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_UART_IRQHandler+0x14e>
 8003350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fb5e 	bl	8003a1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336c:	2b40      	cmp	r3, #64	; 0x40
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d103      	bne.n	800338e <HAL_UART_IRQHandler+0x17a>
 8003386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d04f      	beq.n	800342e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fa66 	bl	8003860 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339e:	2b40      	cmp	r3, #64	; 0x40
 80033a0:	d141      	bne.n	8003426 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3314      	adds	r3, #20
 80033a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033b0:	e853 3f00 	ldrex	r3, [r3]
 80033b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3314      	adds	r3, #20
 80033ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033de:	e841 2300 	strex	r3, r2, [r1]
 80033e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80033e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1d9      	bne.n	80033a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d013      	beq.n	800341e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	4a7d      	ldr	r2, [pc, #500]	; (80035f0 <HAL_UART_IRQHandler+0x3dc>)
 80033fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe f811 	bl	800142a <HAL_DMA_Abort_IT>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d016      	beq.n	800343c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003418:	4610      	mov	r0, r2
 800341a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800341c:	e00e      	b.n	800343c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f99a 	bl	8003758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003424:	e00a      	b.n	800343c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f996 	bl	8003758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800342c:	e006      	b.n	800343c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f992 	bl	8003758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800343a:	e170      	b.n	800371e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800343c:	bf00      	nop
    return;
 800343e:	e16e      	b.n	800371e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	2b01      	cmp	r3, #1
 8003446:	f040 814a 	bne.w	80036de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800344a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 8143 	beq.w	80036de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 813c 	beq.w	80036de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	f040 80b4 	bne.w	80035f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003498:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 8140 	beq.w	8003722 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034aa:	429a      	cmp	r2, r3
 80034ac:	f080 8139 	bcs.w	8003722 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c2:	f000 8088 	beq.w	80035d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	330c      	adds	r3, #12
 80034cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034d4:	e853 3f00 	ldrex	r3, [r3]
 80034d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80034dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	330c      	adds	r3, #12
 80034ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80034f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80034fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800350a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1d9      	bne.n	80034c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3314      	adds	r3, #20
 8003518:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800351c:	e853 3f00 	ldrex	r3, [r3]
 8003520:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003524:	f023 0301 	bic.w	r3, r3, #1
 8003528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3314      	adds	r3, #20
 8003532:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003536:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800353a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800353e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003542:	e841 2300 	strex	r3, r2, [r1]
 8003546:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1e1      	bne.n	8003512 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3314      	adds	r3, #20
 8003554:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003558:	e853 3f00 	ldrex	r3, [r3]
 800355c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800355e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003564:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3314      	adds	r3, #20
 800356e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003572:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003574:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003576:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003578:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800357a:	e841 2300 	strex	r3, r2, [r1]
 800357e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1e3      	bne.n	800354e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	330c      	adds	r3, #12
 800359a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800359e:	e853 3f00 	ldrex	r3, [r3]
 80035a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035a6:	f023 0310 	bic.w	r3, r3, #16
 80035aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	330c      	adds	r3, #12
 80035b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80035b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80035ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035c0:	e841 2300 	strex	r3, r2, [r1]
 80035c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e3      	bne.n	8003594 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fd feba 	bl	800134a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035de:	b29b      	uxth	r3, r3
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	4619      	mov	r1, r3
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f8c0 	bl	800376c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035ec:	e099      	b.n	8003722 <HAL_UART_IRQHandler+0x50e>
 80035ee:	bf00      	nop
 80035f0:	08003927 	.word	0x08003927
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 808b 	beq.w	8003726 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003610:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8086 	beq.w	8003726 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	330c      	adds	r3, #12
 8003620:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003624:	e853 3f00 	ldrex	r3, [r3]
 8003628:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800362a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003630:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	330c      	adds	r3, #12
 800363a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800363e:	647a      	str	r2, [r7, #68]	; 0x44
 8003640:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003642:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003644:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003646:	e841 2300 	strex	r3, r2, [r1]
 800364a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800364c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1e3      	bne.n	800361a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3314      	adds	r3, #20
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	623b      	str	r3, [r7, #32]
   return(result);
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3314      	adds	r3, #20
 8003672:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003676:	633a      	str	r2, [r7, #48]	; 0x30
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800367c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1e3      	bne.n	8003652 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	330c      	adds	r3, #12
 800369e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	e853 3f00 	ldrex	r3, [r3]
 80036a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0310 	bic.w	r3, r3, #16
 80036ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	330c      	adds	r3, #12
 80036b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80036bc:	61fa      	str	r2, [r7, #28]
 80036be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	69b9      	ldr	r1, [r7, #24]
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	e841 2300 	strex	r3, r2, [r1]
 80036c8:	617b      	str	r3, [r7, #20]
   return(result);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e3      	bne.n	8003698 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036d4:	4619      	mov	r1, r3
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f848 	bl	800376c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036dc:	e023      	b.n	8003726 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <HAL_UART_IRQHandler+0x4ea>
 80036ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f929 	bl	800394e <UART_Transmit_IT>
    return;
 80036fc:	e014      	b.n	8003728 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00e      	beq.n	8003728 <HAL_UART_IRQHandler+0x514>
 800370a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f969 	bl	80039ee <UART_EndTransmit_IT>
    return;
 800371c:	e004      	b.n	8003728 <HAL_UART_IRQHandler+0x514>
    return;
 800371e:	bf00      	nop
 8003720:	e002      	b.n	8003728 <HAL_UART_IRQHandler+0x514>
      return;
 8003722:	bf00      	nop
 8003724:	e000      	b.n	8003728 <HAL_UART_IRQHandler+0x514>
      return;
 8003726:	bf00      	nop
  }
}
 8003728:	37e8      	adds	r7, #232	; 0xe8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop

08003730 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b090      	sub	sp, #64	; 0x40
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003794:	e050      	b.n	8003838 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d04c      	beq.n	8003838 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800379e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d007      	beq.n	80037b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80037a4:	f7fd fc90 	bl	80010c8 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d241      	bcs.n	8003838 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	330c      	adds	r3, #12
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	e853 3f00 	ldrex	r3, [r3]
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	330c      	adds	r3, #12
 80037d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037d4:	637a      	str	r2, [r7, #52]	; 0x34
 80037d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037dc:	e841 2300 	strex	r3, r2, [r1]
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e5      	bne.n	80037b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3314      	adds	r3, #20
 80037ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	e853 3f00 	ldrex	r3, [r3]
 80037f6:	613b      	str	r3, [r7, #16]
   return(result);
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3314      	adds	r3, #20
 8003806:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003808:	623a      	str	r2, [r7, #32]
 800380a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380c:	69f9      	ldr	r1, [r7, #28]
 800380e:	6a3a      	ldr	r2, [r7, #32]
 8003810:	e841 2300 	strex	r3, r2, [r1]
 8003814:	61bb      	str	r3, [r7, #24]
   return(result);
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e5      	bne.n	80037e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e00f      	b.n	8003858 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4013      	ands	r3, r2
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	429a      	cmp	r2, r3
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	429a      	cmp	r2, r3
 8003854:	d09f      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3740      	adds	r7, #64	; 0x40
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003860:	b480      	push	{r7}
 8003862:	b095      	sub	sp, #84	; 0x54
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	330c      	adds	r3, #12
 800386e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003872:	e853 3f00 	ldrex	r3, [r3]
 8003876:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800387e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	330c      	adds	r3, #12
 8003886:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003888:	643a      	str	r2, [r7, #64]	; 0x40
 800388a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800388e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003890:	e841 2300 	strex	r3, r2, [r1]
 8003894:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e5      	bne.n	8003868 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3314      	adds	r3, #20
 80038a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3314      	adds	r3, #20
 80038ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e5      	bne.n	800389c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d119      	bne.n	800390c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	330c      	adds	r3, #12
 80038de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f023 0310 	bic.w	r3, r3, #16
 80038ee:	647b      	str	r3, [r7, #68]	; 0x44
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	330c      	adds	r3, #12
 80038f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038f8:	61ba      	str	r2, [r7, #24]
 80038fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	6979      	ldr	r1, [r7, #20]
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	613b      	str	r3, [r7, #16]
   return(result);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e5      	bne.n	80038d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
}
 800391a:	bf00      	nop
 800391c:	3754      	adds	r7, #84	; 0x54
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7ff ff09 	bl	8003758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800394e:	b480      	push	{r7}
 8003950:	b085      	sub	sp, #20
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b21      	cmp	r3, #33	; 0x21
 8003960:	d13e      	bne.n	80039e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396a:	d114      	bne.n	8003996 <UART_Transmit_IT+0x48>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d110      	bne.n	8003996 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003988:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	1c9a      	adds	r2, r3, #2
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	621a      	str	r2, [r3, #32]
 8003994:	e008      	b.n	80039a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	1c59      	adds	r1, r3, #1
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6211      	str	r1, [r2, #32]
 80039a0:	781a      	ldrb	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	4619      	mov	r1, r3
 80039b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10f      	bne.n	80039dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	e000      	b.n	80039e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039e0:	2302      	movs	r3, #2
  }
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7ff fe8e 	bl	8003730 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b08c      	sub	sp, #48	; 0x30
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b22      	cmp	r3, #34	; 0x22
 8003a30:	f040 80ab 	bne.w	8003b8a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3c:	d117      	bne.n	8003a6e <UART_Receive_IT+0x50>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d113      	bne.n	8003a6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	1c9a      	adds	r2, r3, #2
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a6c:	e026      	b.n	8003abc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a80:	d007      	beq.n	8003a92 <UART_Receive_IT+0x74>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10a      	bne.n	8003aa0 <UART_Receive_IT+0x82>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	e008      	b.n	8003ab2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d15a      	bne.n	8003b86 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0220 	bic.w	r2, r2, #32
 8003ade:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695a      	ldr	r2, [r3, #20]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0201 	bic.w	r2, r2, #1
 8003afe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d135      	bne.n	8003b7c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	330c      	adds	r3, #12
 8003b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	e853 3f00 	ldrex	r3, [r3]
 8003b24:	613b      	str	r3, [r7, #16]
   return(result);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f023 0310 	bic.w	r3, r3, #16
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	330c      	adds	r3, #12
 8003b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b36:	623a      	str	r2, [r7, #32]
 8003b38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	69f9      	ldr	r1, [r7, #28]
 8003b3c:	6a3a      	ldr	r2, [r7, #32]
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e5      	bne.n	8003b16 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	d10a      	bne.n	8003b6e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b72:	4619      	mov	r1, r3
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff fdf9 	bl	800376c <HAL_UARTEx_RxEventCallback>
 8003b7a:	e002      	b.n	8003b82 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff fde1 	bl	8003744 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	e002      	b.n	8003b8c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e000      	b.n	8003b8c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003b8a:	2302      	movs	r3, #2
  }
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3730      	adds	r7, #48	; 0x30
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b98:	b0c0      	sub	sp, #256	; 0x100
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb0:	68d9      	ldr	r1, [r3, #12]
 8003bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	ea40 0301 	orr.w	r3, r0, r1
 8003bbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bec:	f021 010c 	bic.w	r1, r1, #12
 8003bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bfa:	430b      	orrs	r3, r1
 8003bfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0e:	6999      	ldr	r1, [r3, #24]
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	ea40 0301 	orr.w	r3, r0, r1
 8003c1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4b8f      	ldr	r3, [pc, #572]	; (8003e60 <UART_SetConfig+0x2cc>)
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d005      	beq.n	8003c34 <UART_SetConfig+0xa0>
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	4b8d      	ldr	r3, [pc, #564]	; (8003e64 <UART_SetConfig+0x2d0>)
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d104      	bne.n	8003c3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c34:	f7ff f822 	bl	8002c7c <HAL_RCC_GetPCLK2Freq>
 8003c38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c3c:	e003      	b.n	8003c46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c3e:	f7ff f809 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 8003c42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c50:	f040 810c 	bne.w	8003e6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c66:	4622      	mov	r2, r4
 8003c68:	462b      	mov	r3, r5
 8003c6a:	1891      	adds	r1, r2, r2
 8003c6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c6e:	415b      	adcs	r3, r3
 8003c70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c76:	4621      	mov	r1, r4
 8003c78:	eb12 0801 	adds.w	r8, r2, r1
 8003c7c:	4629      	mov	r1, r5
 8003c7e:	eb43 0901 	adc.w	r9, r3, r1
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c96:	4690      	mov	r8, r2
 8003c98:	4699      	mov	r9, r3
 8003c9a:	4623      	mov	r3, r4
 8003c9c:	eb18 0303 	adds.w	r3, r8, r3
 8003ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ca4:	462b      	mov	r3, r5
 8003ca6:	eb49 0303 	adc.w	r3, r9, r3
 8003caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	18db      	adds	r3, r3, r3
 8003cc6:	653b      	str	r3, [r7, #80]	; 0x50
 8003cc8:	4613      	mov	r3, r2
 8003cca:	eb42 0303 	adc.w	r3, r2, r3
 8003cce:	657b      	str	r3, [r7, #84]	; 0x54
 8003cd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003cd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003cd8:	f7fc fad2 	bl	8000280 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4b61      	ldr	r3, [pc, #388]	; (8003e68 <UART_SetConfig+0x2d4>)
 8003ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	011c      	lsls	r4, r3, #4
 8003cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cf4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003cf8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	464b      	mov	r3, r9
 8003d00:	1891      	adds	r1, r2, r2
 8003d02:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d04:	415b      	adcs	r3, r3
 8003d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d0c:	4641      	mov	r1, r8
 8003d0e:	eb12 0a01 	adds.w	sl, r2, r1
 8003d12:	4649      	mov	r1, r9
 8003d14:	eb43 0b01 	adc.w	fp, r3, r1
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d2c:	4692      	mov	sl, r2
 8003d2e:	469b      	mov	fp, r3
 8003d30:	4643      	mov	r3, r8
 8003d32:	eb1a 0303 	adds.w	r3, sl, r3
 8003d36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d3a:	464b      	mov	r3, r9
 8003d3c:	eb4b 0303 	adc.w	r3, fp, r3
 8003d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	18db      	adds	r3, r3, r3
 8003d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d5e:	4613      	mov	r3, r2
 8003d60:	eb42 0303 	adc.w	r3, r2, r3
 8003d64:	647b      	str	r3, [r7, #68]	; 0x44
 8003d66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d6e:	f7fc fa87 	bl	8000280 <__aeabi_uldivmod>
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4611      	mov	r1, r2
 8003d78:	4b3b      	ldr	r3, [pc, #236]	; (8003e68 <UART_SetConfig+0x2d4>)
 8003d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	2264      	movs	r2, #100	; 0x64
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	1acb      	subs	r3, r1, r3
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d8e:	4b36      	ldr	r3, [pc, #216]	; (8003e68 <UART_SetConfig+0x2d4>)
 8003d90:	fba3 2302 	umull	r2, r3, r3, r2
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d9c:	441c      	add	r4, r3
 8003d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003da2:	2200      	movs	r2, #0
 8003da4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003da8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003dac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003db0:	4642      	mov	r2, r8
 8003db2:	464b      	mov	r3, r9
 8003db4:	1891      	adds	r1, r2, r2
 8003db6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003db8:	415b      	adcs	r3, r3
 8003dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003dc0:	4641      	mov	r1, r8
 8003dc2:	1851      	adds	r1, r2, r1
 8003dc4:	6339      	str	r1, [r7, #48]	; 0x30
 8003dc6:	4649      	mov	r1, r9
 8003dc8:	414b      	adcs	r3, r1
 8003dca:	637b      	str	r3, [r7, #52]	; 0x34
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003dd8:	4659      	mov	r1, fp
 8003dda:	00cb      	lsls	r3, r1, #3
 8003ddc:	4651      	mov	r1, sl
 8003dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003de2:	4651      	mov	r1, sl
 8003de4:	00ca      	lsls	r2, r1, #3
 8003de6:	4610      	mov	r0, r2
 8003de8:	4619      	mov	r1, r3
 8003dea:	4603      	mov	r3, r0
 8003dec:	4642      	mov	r2, r8
 8003dee:	189b      	adds	r3, r3, r2
 8003df0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003df4:	464b      	mov	r3, r9
 8003df6:	460a      	mov	r2, r1
 8003df8:	eb42 0303 	adc.w	r3, r2, r3
 8003dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e14:	460b      	mov	r3, r1
 8003e16:	18db      	adds	r3, r3, r3
 8003e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	eb42 0303 	adc.w	r3, r2, r3
 8003e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e2a:	f7fc fa29 	bl	8000280 <__aeabi_uldivmod>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	4b0d      	ldr	r3, [pc, #52]	; (8003e68 <UART_SetConfig+0x2d4>)
 8003e34:	fba3 1302 	umull	r1, r3, r3, r2
 8003e38:	095b      	lsrs	r3, r3, #5
 8003e3a:	2164      	movs	r1, #100	; 0x64
 8003e3c:	fb01 f303 	mul.w	r3, r1, r3
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	3332      	adds	r3, #50	; 0x32
 8003e46:	4a08      	ldr	r2, [pc, #32]	; (8003e68 <UART_SetConfig+0x2d4>)
 8003e48:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	f003 0207 	and.w	r2, r3, #7
 8003e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4422      	add	r2, r4
 8003e5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e5c:	e105      	b.n	800406a <UART_SetConfig+0x4d6>
 8003e5e:	bf00      	nop
 8003e60:	40011000 	.word	0x40011000
 8003e64:	40011400 	.word	0x40011400
 8003e68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e70:	2200      	movs	r2, #0
 8003e72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e7e:	4642      	mov	r2, r8
 8003e80:	464b      	mov	r3, r9
 8003e82:	1891      	adds	r1, r2, r2
 8003e84:	6239      	str	r1, [r7, #32]
 8003e86:	415b      	adcs	r3, r3
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
 8003e8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e8e:	4641      	mov	r1, r8
 8003e90:	1854      	adds	r4, r2, r1
 8003e92:	4649      	mov	r1, r9
 8003e94:	eb43 0501 	adc.w	r5, r3, r1
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	00eb      	lsls	r3, r5, #3
 8003ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ea6:	00e2      	lsls	r2, r4, #3
 8003ea8:	4614      	mov	r4, r2
 8003eaa:	461d      	mov	r5, r3
 8003eac:	4643      	mov	r3, r8
 8003eae:	18e3      	adds	r3, r4, r3
 8003eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003eb4:	464b      	mov	r3, r9
 8003eb6:	eb45 0303 	adc.w	r3, r5, r3
 8003eba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003eca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003eda:	4629      	mov	r1, r5
 8003edc:	008b      	lsls	r3, r1, #2
 8003ede:	4621      	mov	r1, r4
 8003ee0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	008a      	lsls	r2, r1, #2
 8003ee8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003eec:	f7fc f9c8 	bl	8000280 <__aeabi_uldivmod>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4b60      	ldr	r3, [pc, #384]	; (8004078 <UART_SetConfig+0x4e4>)
 8003ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	011c      	lsls	r4, r3, #4
 8003efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f02:	2200      	movs	r2, #0
 8003f04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f10:	4642      	mov	r2, r8
 8003f12:	464b      	mov	r3, r9
 8003f14:	1891      	adds	r1, r2, r2
 8003f16:	61b9      	str	r1, [r7, #24]
 8003f18:	415b      	adcs	r3, r3
 8003f1a:	61fb      	str	r3, [r7, #28]
 8003f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f20:	4641      	mov	r1, r8
 8003f22:	1851      	adds	r1, r2, r1
 8003f24:	6139      	str	r1, [r7, #16]
 8003f26:	4649      	mov	r1, r9
 8003f28:	414b      	adcs	r3, r1
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f38:	4659      	mov	r1, fp
 8003f3a:	00cb      	lsls	r3, r1, #3
 8003f3c:	4651      	mov	r1, sl
 8003f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f42:	4651      	mov	r1, sl
 8003f44:	00ca      	lsls	r2, r1, #3
 8003f46:	4610      	mov	r0, r2
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	189b      	adds	r3, r3, r2
 8003f50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f54:	464b      	mov	r3, r9
 8003f56:	460a      	mov	r2, r1
 8003f58:	eb42 0303 	adc.w	r3, r2, r3
 8003f5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f78:	4649      	mov	r1, r9
 8003f7a:	008b      	lsls	r3, r1, #2
 8003f7c:	4641      	mov	r1, r8
 8003f7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f82:	4641      	mov	r1, r8
 8003f84:	008a      	lsls	r2, r1, #2
 8003f86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f8a:	f7fc f979 	bl	8000280 <__aeabi_uldivmod>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4b39      	ldr	r3, [pc, #228]	; (8004078 <UART_SetConfig+0x4e4>)
 8003f94:	fba3 1302 	umull	r1, r3, r3, r2
 8003f98:	095b      	lsrs	r3, r3, #5
 8003f9a:	2164      	movs	r1, #100	; 0x64
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	3332      	adds	r3, #50	; 0x32
 8003fa6:	4a34      	ldr	r2, [pc, #208]	; (8004078 <UART_SetConfig+0x4e4>)
 8003fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fb2:	441c      	add	r4, r3
 8003fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fb8:	2200      	movs	r2, #0
 8003fba:	673b      	str	r3, [r7, #112]	; 0x70
 8003fbc:	677a      	str	r2, [r7, #116]	; 0x74
 8003fbe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fc2:	4642      	mov	r2, r8
 8003fc4:	464b      	mov	r3, r9
 8003fc6:	1891      	adds	r1, r2, r2
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	415b      	adcs	r3, r3
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fd2:	4641      	mov	r1, r8
 8003fd4:	1851      	adds	r1, r2, r1
 8003fd6:	6039      	str	r1, [r7, #0]
 8003fd8:	4649      	mov	r1, r9
 8003fda:	414b      	adcs	r3, r1
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fea:	4659      	mov	r1, fp
 8003fec:	00cb      	lsls	r3, r1, #3
 8003fee:	4651      	mov	r1, sl
 8003ff0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ff4:	4651      	mov	r1, sl
 8003ff6:	00ca      	lsls	r2, r1, #3
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	4642      	mov	r2, r8
 8004000:	189b      	adds	r3, r3, r2
 8004002:	66bb      	str	r3, [r7, #104]	; 0x68
 8004004:	464b      	mov	r3, r9
 8004006:	460a      	mov	r2, r1
 8004008:	eb42 0303 	adc.w	r3, r2, r3
 800400c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800400e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	663b      	str	r3, [r7, #96]	; 0x60
 8004018:	667a      	str	r2, [r7, #100]	; 0x64
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004026:	4649      	mov	r1, r9
 8004028:	008b      	lsls	r3, r1, #2
 800402a:	4641      	mov	r1, r8
 800402c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004030:	4641      	mov	r1, r8
 8004032:	008a      	lsls	r2, r1, #2
 8004034:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004038:	f7fc f922 	bl	8000280 <__aeabi_uldivmod>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4b0d      	ldr	r3, [pc, #52]	; (8004078 <UART_SetConfig+0x4e4>)
 8004042:	fba3 1302 	umull	r1, r3, r3, r2
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	2164      	movs	r1, #100	; 0x64
 800404a:	fb01 f303 	mul.w	r3, r1, r3
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	3332      	adds	r3, #50	; 0x32
 8004054:	4a08      	ldr	r2, [pc, #32]	; (8004078 <UART_SetConfig+0x4e4>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	f003 020f 	and.w	r2, r3, #15
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4422      	add	r2, r4
 8004068:	609a      	str	r2, [r3, #8]
}
 800406a:	bf00      	nop
 800406c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004070:	46bd      	mov	sp, r7
 8004072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004076:	bf00      	nop
 8004078:	51eb851f 	.word	0x51eb851f

0800407c <__errno>:
 800407c:	4b01      	ldr	r3, [pc, #4]	; (8004084 <__errno+0x8>)
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	2000000c 	.word	0x2000000c

08004088 <__libc_init_array>:
 8004088:	b570      	push	{r4, r5, r6, lr}
 800408a:	4d0d      	ldr	r5, [pc, #52]	; (80040c0 <__libc_init_array+0x38>)
 800408c:	4c0d      	ldr	r4, [pc, #52]	; (80040c4 <__libc_init_array+0x3c>)
 800408e:	1b64      	subs	r4, r4, r5
 8004090:	10a4      	asrs	r4, r4, #2
 8004092:	2600      	movs	r6, #0
 8004094:	42a6      	cmp	r6, r4
 8004096:	d109      	bne.n	80040ac <__libc_init_array+0x24>
 8004098:	4d0b      	ldr	r5, [pc, #44]	; (80040c8 <__libc_init_array+0x40>)
 800409a:	4c0c      	ldr	r4, [pc, #48]	; (80040cc <__libc_init_array+0x44>)
 800409c:	f000 fc8e 	bl	80049bc <_init>
 80040a0:	1b64      	subs	r4, r4, r5
 80040a2:	10a4      	asrs	r4, r4, #2
 80040a4:	2600      	movs	r6, #0
 80040a6:	42a6      	cmp	r6, r4
 80040a8:	d105      	bne.n	80040b6 <__libc_init_array+0x2e>
 80040aa:	bd70      	pop	{r4, r5, r6, pc}
 80040ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b0:	4798      	blx	r3
 80040b2:	3601      	adds	r6, #1
 80040b4:	e7ee      	b.n	8004094 <__libc_init_array+0xc>
 80040b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ba:	4798      	blx	r3
 80040bc:	3601      	adds	r6, #1
 80040be:	e7f2      	b.n	80040a6 <__libc_init_array+0x1e>
 80040c0:	08004a30 	.word	0x08004a30
 80040c4:	08004a30 	.word	0x08004a30
 80040c8:	08004a30 	.word	0x08004a30
 80040cc:	08004a34 	.word	0x08004a34

080040d0 <memset>:
 80040d0:	4402      	add	r2, r0
 80040d2:	4603      	mov	r3, r0
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d100      	bne.n	80040da <memset+0xa>
 80040d8:	4770      	bx	lr
 80040da:	f803 1b01 	strb.w	r1, [r3], #1
 80040de:	e7f9      	b.n	80040d4 <memset+0x4>

080040e0 <siprintf>:
 80040e0:	b40e      	push	{r1, r2, r3}
 80040e2:	b500      	push	{lr}
 80040e4:	b09c      	sub	sp, #112	; 0x70
 80040e6:	ab1d      	add	r3, sp, #116	; 0x74
 80040e8:	9002      	str	r0, [sp, #8]
 80040ea:	9006      	str	r0, [sp, #24]
 80040ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040f0:	4809      	ldr	r0, [pc, #36]	; (8004118 <siprintf+0x38>)
 80040f2:	9107      	str	r1, [sp, #28]
 80040f4:	9104      	str	r1, [sp, #16]
 80040f6:	4909      	ldr	r1, [pc, #36]	; (800411c <siprintf+0x3c>)
 80040f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80040fc:	9105      	str	r1, [sp, #20]
 80040fe:	6800      	ldr	r0, [r0, #0]
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	a902      	add	r1, sp, #8
 8004104:	f000 f868 	bl	80041d8 <_svfiprintf_r>
 8004108:	9b02      	ldr	r3, [sp, #8]
 800410a:	2200      	movs	r2, #0
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	b01c      	add	sp, #112	; 0x70
 8004110:	f85d eb04 	ldr.w	lr, [sp], #4
 8004114:	b003      	add	sp, #12
 8004116:	4770      	bx	lr
 8004118:	2000000c 	.word	0x2000000c
 800411c:	ffff0208 	.word	0xffff0208

08004120 <__ssputs_r>:
 8004120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004124:	688e      	ldr	r6, [r1, #8]
 8004126:	429e      	cmp	r6, r3
 8004128:	4682      	mov	sl, r0
 800412a:	460c      	mov	r4, r1
 800412c:	4690      	mov	r8, r2
 800412e:	461f      	mov	r7, r3
 8004130:	d838      	bhi.n	80041a4 <__ssputs_r+0x84>
 8004132:	898a      	ldrh	r2, [r1, #12]
 8004134:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004138:	d032      	beq.n	80041a0 <__ssputs_r+0x80>
 800413a:	6825      	ldr	r5, [r4, #0]
 800413c:	6909      	ldr	r1, [r1, #16]
 800413e:	eba5 0901 	sub.w	r9, r5, r1
 8004142:	6965      	ldr	r5, [r4, #20]
 8004144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004148:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800414c:	3301      	adds	r3, #1
 800414e:	444b      	add	r3, r9
 8004150:	106d      	asrs	r5, r5, #1
 8004152:	429d      	cmp	r5, r3
 8004154:	bf38      	it	cc
 8004156:	461d      	movcc	r5, r3
 8004158:	0553      	lsls	r3, r2, #21
 800415a:	d531      	bpl.n	80041c0 <__ssputs_r+0xa0>
 800415c:	4629      	mov	r1, r5
 800415e:	f000 fb63 	bl	8004828 <_malloc_r>
 8004162:	4606      	mov	r6, r0
 8004164:	b950      	cbnz	r0, 800417c <__ssputs_r+0x5c>
 8004166:	230c      	movs	r3, #12
 8004168:	f8ca 3000 	str.w	r3, [sl]
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004172:	81a3      	strh	r3, [r4, #12]
 8004174:	f04f 30ff 	mov.w	r0, #4294967295
 8004178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800417c:	6921      	ldr	r1, [r4, #16]
 800417e:	464a      	mov	r2, r9
 8004180:	f000 fabe 	bl	8004700 <memcpy>
 8004184:	89a3      	ldrh	r3, [r4, #12]
 8004186:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800418a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418e:	81a3      	strh	r3, [r4, #12]
 8004190:	6126      	str	r6, [r4, #16]
 8004192:	6165      	str	r5, [r4, #20]
 8004194:	444e      	add	r6, r9
 8004196:	eba5 0509 	sub.w	r5, r5, r9
 800419a:	6026      	str	r6, [r4, #0]
 800419c:	60a5      	str	r5, [r4, #8]
 800419e:	463e      	mov	r6, r7
 80041a0:	42be      	cmp	r6, r7
 80041a2:	d900      	bls.n	80041a6 <__ssputs_r+0x86>
 80041a4:	463e      	mov	r6, r7
 80041a6:	6820      	ldr	r0, [r4, #0]
 80041a8:	4632      	mov	r2, r6
 80041aa:	4641      	mov	r1, r8
 80041ac:	f000 fab6 	bl	800471c <memmove>
 80041b0:	68a3      	ldr	r3, [r4, #8]
 80041b2:	1b9b      	subs	r3, r3, r6
 80041b4:	60a3      	str	r3, [r4, #8]
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	4433      	add	r3, r6
 80041ba:	6023      	str	r3, [r4, #0]
 80041bc:	2000      	movs	r0, #0
 80041be:	e7db      	b.n	8004178 <__ssputs_r+0x58>
 80041c0:	462a      	mov	r2, r5
 80041c2:	f000 fba5 	bl	8004910 <_realloc_r>
 80041c6:	4606      	mov	r6, r0
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d1e1      	bne.n	8004190 <__ssputs_r+0x70>
 80041cc:	6921      	ldr	r1, [r4, #16]
 80041ce:	4650      	mov	r0, sl
 80041d0:	f000 fabe 	bl	8004750 <_free_r>
 80041d4:	e7c7      	b.n	8004166 <__ssputs_r+0x46>
	...

080041d8 <_svfiprintf_r>:
 80041d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041dc:	4698      	mov	r8, r3
 80041de:	898b      	ldrh	r3, [r1, #12]
 80041e0:	061b      	lsls	r3, r3, #24
 80041e2:	b09d      	sub	sp, #116	; 0x74
 80041e4:	4607      	mov	r7, r0
 80041e6:	460d      	mov	r5, r1
 80041e8:	4614      	mov	r4, r2
 80041ea:	d50e      	bpl.n	800420a <_svfiprintf_r+0x32>
 80041ec:	690b      	ldr	r3, [r1, #16]
 80041ee:	b963      	cbnz	r3, 800420a <_svfiprintf_r+0x32>
 80041f0:	2140      	movs	r1, #64	; 0x40
 80041f2:	f000 fb19 	bl	8004828 <_malloc_r>
 80041f6:	6028      	str	r0, [r5, #0]
 80041f8:	6128      	str	r0, [r5, #16]
 80041fa:	b920      	cbnz	r0, 8004206 <_svfiprintf_r+0x2e>
 80041fc:	230c      	movs	r3, #12
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	f04f 30ff 	mov.w	r0, #4294967295
 8004204:	e0d1      	b.n	80043aa <_svfiprintf_r+0x1d2>
 8004206:	2340      	movs	r3, #64	; 0x40
 8004208:	616b      	str	r3, [r5, #20]
 800420a:	2300      	movs	r3, #0
 800420c:	9309      	str	r3, [sp, #36]	; 0x24
 800420e:	2320      	movs	r3, #32
 8004210:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004214:	f8cd 800c 	str.w	r8, [sp, #12]
 8004218:	2330      	movs	r3, #48	; 0x30
 800421a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80043c4 <_svfiprintf_r+0x1ec>
 800421e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004222:	f04f 0901 	mov.w	r9, #1
 8004226:	4623      	mov	r3, r4
 8004228:	469a      	mov	sl, r3
 800422a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800422e:	b10a      	cbz	r2, 8004234 <_svfiprintf_r+0x5c>
 8004230:	2a25      	cmp	r2, #37	; 0x25
 8004232:	d1f9      	bne.n	8004228 <_svfiprintf_r+0x50>
 8004234:	ebba 0b04 	subs.w	fp, sl, r4
 8004238:	d00b      	beq.n	8004252 <_svfiprintf_r+0x7a>
 800423a:	465b      	mov	r3, fp
 800423c:	4622      	mov	r2, r4
 800423e:	4629      	mov	r1, r5
 8004240:	4638      	mov	r0, r7
 8004242:	f7ff ff6d 	bl	8004120 <__ssputs_r>
 8004246:	3001      	adds	r0, #1
 8004248:	f000 80aa 	beq.w	80043a0 <_svfiprintf_r+0x1c8>
 800424c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800424e:	445a      	add	r2, fp
 8004250:	9209      	str	r2, [sp, #36]	; 0x24
 8004252:	f89a 3000 	ldrb.w	r3, [sl]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 80a2 	beq.w	80043a0 <_svfiprintf_r+0x1c8>
 800425c:	2300      	movs	r3, #0
 800425e:	f04f 32ff 	mov.w	r2, #4294967295
 8004262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004266:	f10a 0a01 	add.w	sl, sl, #1
 800426a:	9304      	str	r3, [sp, #16]
 800426c:	9307      	str	r3, [sp, #28]
 800426e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004272:	931a      	str	r3, [sp, #104]	; 0x68
 8004274:	4654      	mov	r4, sl
 8004276:	2205      	movs	r2, #5
 8004278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800427c:	4851      	ldr	r0, [pc, #324]	; (80043c4 <_svfiprintf_r+0x1ec>)
 800427e:	f7fb ffaf 	bl	80001e0 <memchr>
 8004282:	9a04      	ldr	r2, [sp, #16]
 8004284:	b9d8      	cbnz	r0, 80042be <_svfiprintf_r+0xe6>
 8004286:	06d0      	lsls	r0, r2, #27
 8004288:	bf44      	itt	mi
 800428a:	2320      	movmi	r3, #32
 800428c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004290:	0711      	lsls	r1, r2, #28
 8004292:	bf44      	itt	mi
 8004294:	232b      	movmi	r3, #43	; 0x2b
 8004296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800429a:	f89a 3000 	ldrb.w	r3, [sl]
 800429e:	2b2a      	cmp	r3, #42	; 0x2a
 80042a0:	d015      	beq.n	80042ce <_svfiprintf_r+0xf6>
 80042a2:	9a07      	ldr	r2, [sp, #28]
 80042a4:	4654      	mov	r4, sl
 80042a6:	2000      	movs	r0, #0
 80042a8:	f04f 0c0a 	mov.w	ip, #10
 80042ac:	4621      	mov	r1, r4
 80042ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042b2:	3b30      	subs	r3, #48	; 0x30
 80042b4:	2b09      	cmp	r3, #9
 80042b6:	d94e      	bls.n	8004356 <_svfiprintf_r+0x17e>
 80042b8:	b1b0      	cbz	r0, 80042e8 <_svfiprintf_r+0x110>
 80042ba:	9207      	str	r2, [sp, #28]
 80042bc:	e014      	b.n	80042e8 <_svfiprintf_r+0x110>
 80042be:	eba0 0308 	sub.w	r3, r0, r8
 80042c2:	fa09 f303 	lsl.w	r3, r9, r3
 80042c6:	4313      	orrs	r3, r2
 80042c8:	9304      	str	r3, [sp, #16]
 80042ca:	46a2      	mov	sl, r4
 80042cc:	e7d2      	b.n	8004274 <_svfiprintf_r+0x9c>
 80042ce:	9b03      	ldr	r3, [sp, #12]
 80042d0:	1d19      	adds	r1, r3, #4
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	9103      	str	r1, [sp, #12]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	bfbb      	ittet	lt
 80042da:	425b      	neglt	r3, r3
 80042dc:	f042 0202 	orrlt.w	r2, r2, #2
 80042e0:	9307      	strge	r3, [sp, #28]
 80042e2:	9307      	strlt	r3, [sp, #28]
 80042e4:	bfb8      	it	lt
 80042e6:	9204      	strlt	r2, [sp, #16]
 80042e8:	7823      	ldrb	r3, [r4, #0]
 80042ea:	2b2e      	cmp	r3, #46	; 0x2e
 80042ec:	d10c      	bne.n	8004308 <_svfiprintf_r+0x130>
 80042ee:	7863      	ldrb	r3, [r4, #1]
 80042f0:	2b2a      	cmp	r3, #42	; 0x2a
 80042f2:	d135      	bne.n	8004360 <_svfiprintf_r+0x188>
 80042f4:	9b03      	ldr	r3, [sp, #12]
 80042f6:	1d1a      	adds	r2, r3, #4
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	9203      	str	r2, [sp, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bfb8      	it	lt
 8004300:	f04f 33ff 	movlt.w	r3, #4294967295
 8004304:	3402      	adds	r4, #2
 8004306:	9305      	str	r3, [sp, #20]
 8004308:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80043d4 <_svfiprintf_r+0x1fc>
 800430c:	7821      	ldrb	r1, [r4, #0]
 800430e:	2203      	movs	r2, #3
 8004310:	4650      	mov	r0, sl
 8004312:	f7fb ff65 	bl	80001e0 <memchr>
 8004316:	b140      	cbz	r0, 800432a <_svfiprintf_r+0x152>
 8004318:	2340      	movs	r3, #64	; 0x40
 800431a:	eba0 000a 	sub.w	r0, r0, sl
 800431e:	fa03 f000 	lsl.w	r0, r3, r0
 8004322:	9b04      	ldr	r3, [sp, #16]
 8004324:	4303      	orrs	r3, r0
 8004326:	3401      	adds	r4, #1
 8004328:	9304      	str	r3, [sp, #16]
 800432a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800432e:	4826      	ldr	r0, [pc, #152]	; (80043c8 <_svfiprintf_r+0x1f0>)
 8004330:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004334:	2206      	movs	r2, #6
 8004336:	f7fb ff53 	bl	80001e0 <memchr>
 800433a:	2800      	cmp	r0, #0
 800433c:	d038      	beq.n	80043b0 <_svfiprintf_r+0x1d8>
 800433e:	4b23      	ldr	r3, [pc, #140]	; (80043cc <_svfiprintf_r+0x1f4>)
 8004340:	bb1b      	cbnz	r3, 800438a <_svfiprintf_r+0x1b2>
 8004342:	9b03      	ldr	r3, [sp, #12]
 8004344:	3307      	adds	r3, #7
 8004346:	f023 0307 	bic.w	r3, r3, #7
 800434a:	3308      	adds	r3, #8
 800434c:	9303      	str	r3, [sp, #12]
 800434e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004350:	4433      	add	r3, r6
 8004352:	9309      	str	r3, [sp, #36]	; 0x24
 8004354:	e767      	b.n	8004226 <_svfiprintf_r+0x4e>
 8004356:	fb0c 3202 	mla	r2, ip, r2, r3
 800435a:	460c      	mov	r4, r1
 800435c:	2001      	movs	r0, #1
 800435e:	e7a5      	b.n	80042ac <_svfiprintf_r+0xd4>
 8004360:	2300      	movs	r3, #0
 8004362:	3401      	adds	r4, #1
 8004364:	9305      	str	r3, [sp, #20]
 8004366:	4619      	mov	r1, r3
 8004368:	f04f 0c0a 	mov.w	ip, #10
 800436c:	4620      	mov	r0, r4
 800436e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004372:	3a30      	subs	r2, #48	; 0x30
 8004374:	2a09      	cmp	r2, #9
 8004376:	d903      	bls.n	8004380 <_svfiprintf_r+0x1a8>
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0c5      	beq.n	8004308 <_svfiprintf_r+0x130>
 800437c:	9105      	str	r1, [sp, #20]
 800437e:	e7c3      	b.n	8004308 <_svfiprintf_r+0x130>
 8004380:	fb0c 2101 	mla	r1, ip, r1, r2
 8004384:	4604      	mov	r4, r0
 8004386:	2301      	movs	r3, #1
 8004388:	e7f0      	b.n	800436c <_svfiprintf_r+0x194>
 800438a:	ab03      	add	r3, sp, #12
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	462a      	mov	r2, r5
 8004390:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <_svfiprintf_r+0x1f8>)
 8004392:	a904      	add	r1, sp, #16
 8004394:	4638      	mov	r0, r7
 8004396:	f3af 8000 	nop.w
 800439a:	1c42      	adds	r2, r0, #1
 800439c:	4606      	mov	r6, r0
 800439e:	d1d6      	bne.n	800434e <_svfiprintf_r+0x176>
 80043a0:	89ab      	ldrh	r3, [r5, #12]
 80043a2:	065b      	lsls	r3, r3, #25
 80043a4:	f53f af2c 	bmi.w	8004200 <_svfiprintf_r+0x28>
 80043a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043aa:	b01d      	add	sp, #116	; 0x74
 80043ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b0:	ab03      	add	r3, sp, #12
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	462a      	mov	r2, r5
 80043b6:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <_svfiprintf_r+0x1f8>)
 80043b8:	a904      	add	r1, sp, #16
 80043ba:	4638      	mov	r0, r7
 80043bc:	f000 f87a 	bl	80044b4 <_printf_i>
 80043c0:	e7eb      	b.n	800439a <_svfiprintf_r+0x1c2>
 80043c2:	bf00      	nop
 80043c4:	080049f4 	.word	0x080049f4
 80043c8:	080049fe 	.word	0x080049fe
 80043cc:	00000000 	.word	0x00000000
 80043d0:	08004121 	.word	0x08004121
 80043d4:	080049fa 	.word	0x080049fa

080043d8 <_printf_common>:
 80043d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043dc:	4616      	mov	r6, r2
 80043de:	4699      	mov	r9, r3
 80043e0:	688a      	ldr	r2, [r1, #8]
 80043e2:	690b      	ldr	r3, [r1, #16]
 80043e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043e8:	4293      	cmp	r3, r2
 80043ea:	bfb8      	it	lt
 80043ec:	4613      	movlt	r3, r2
 80043ee:	6033      	str	r3, [r6, #0]
 80043f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043f4:	4607      	mov	r7, r0
 80043f6:	460c      	mov	r4, r1
 80043f8:	b10a      	cbz	r2, 80043fe <_printf_common+0x26>
 80043fa:	3301      	adds	r3, #1
 80043fc:	6033      	str	r3, [r6, #0]
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	0699      	lsls	r1, r3, #26
 8004402:	bf42      	ittt	mi
 8004404:	6833      	ldrmi	r3, [r6, #0]
 8004406:	3302      	addmi	r3, #2
 8004408:	6033      	strmi	r3, [r6, #0]
 800440a:	6825      	ldr	r5, [r4, #0]
 800440c:	f015 0506 	ands.w	r5, r5, #6
 8004410:	d106      	bne.n	8004420 <_printf_common+0x48>
 8004412:	f104 0a19 	add.w	sl, r4, #25
 8004416:	68e3      	ldr	r3, [r4, #12]
 8004418:	6832      	ldr	r2, [r6, #0]
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	42ab      	cmp	r3, r5
 800441e:	dc26      	bgt.n	800446e <_printf_common+0x96>
 8004420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004424:	1e13      	subs	r3, r2, #0
 8004426:	6822      	ldr	r2, [r4, #0]
 8004428:	bf18      	it	ne
 800442a:	2301      	movne	r3, #1
 800442c:	0692      	lsls	r2, r2, #26
 800442e:	d42b      	bmi.n	8004488 <_printf_common+0xb0>
 8004430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004434:	4649      	mov	r1, r9
 8004436:	4638      	mov	r0, r7
 8004438:	47c0      	blx	r8
 800443a:	3001      	adds	r0, #1
 800443c:	d01e      	beq.n	800447c <_printf_common+0xa4>
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	68e5      	ldr	r5, [r4, #12]
 8004442:	6832      	ldr	r2, [r6, #0]
 8004444:	f003 0306 	and.w	r3, r3, #6
 8004448:	2b04      	cmp	r3, #4
 800444a:	bf08      	it	eq
 800444c:	1aad      	subeq	r5, r5, r2
 800444e:	68a3      	ldr	r3, [r4, #8]
 8004450:	6922      	ldr	r2, [r4, #16]
 8004452:	bf0c      	ite	eq
 8004454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004458:	2500      	movne	r5, #0
 800445a:	4293      	cmp	r3, r2
 800445c:	bfc4      	itt	gt
 800445e:	1a9b      	subgt	r3, r3, r2
 8004460:	18ed      	addgt	r5, r5, r3
 8004462:	2600      	movs	r6, #0
 8004464:	341a      	adds	r4, #26
 8004466:	42b5      	cmp	r5, r6
 8004468:	d11a      	bne.n	80044a0 <_printf_common+0xc8>
 800446a:	2000      	movs	r0, #0
 800446c:	e008      	b.n	8004480 <_printf_common+0xa8>
 800446e:	2301      	movs	r3, #1
 8004470:	4652      	mov	r2, sl
 8004472:	4649      	mov	r1, r9
 8004474:	4638      	mov	r0, r7
 8004476:	47c0      	blx	r8
 8004478:	3001      	adds	r0, #1
 800447a:	d103      	bne.n	8004484 <_printf_common+0xac>
 800447c:	f04f 30ff 	mov.w	r0, #4294967295
 8004480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004484:	3501      	adds	r5, #1
 8004486:	e7c6      	b.n	8004416 <_printf_common+0x3e>
 8004488:	18e1      	adds	r1, r4, r3
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	2030      	movs	r0, #48	; 0x30
 800448e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004492:	4422      	add	r2, r4
 8004494:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004498:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800449c:	3302      	adds	r3, #2
 800449e:	e7c7      	b.n	8004430 <_printf_common+0x58>
 80044a0:	2301      	movs	r3, #1
 80044a2:	4622      	mov	r2, r4
 80044a4:	4649      	mov	r1, r9
 80044a6:	4638      	mov	r0, r7
 80044a8:	47c0      	blx	r8
 80044aa:	3001      	adds	r0, #1
 80044ac:	d0e6      	beq.n	800447c <_printf_common+0xa4>
 80044ae:	3601      	adds	r6, #1
 80044b0:	e7d9      	b.n	8004466 <_printf_common+0x8e>
	...

080044b4 <_printf_i>:
 80044b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044b8:	7e0f      	ldrb	r7, [r1, #24]
 80044ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044bc:	2f78      	cmp	r7, #120	; 0x78
 80044be:	4691      	mov	r9, r2
 80044c0:	4680      	mov	r8, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	469a      	mov	sl, r3
 80044c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044ca:	d807      	bhi.n	80044dc <_printf_i+0x28>
 80044cc:	2f62      	cmp	r7, #98	; 0x62
 80044ce:	d80a      	bhi.n	80044e6 <_printf_i+0x32>
 80044d0:	2f00      	cmp	r7, #0
 80044d2:	f000 80d8 	beq.w	8004686 <_printf_i+0x1d2>
 80044d6:	2f58      	cmp	r7, #88	; 0x58
 80044d8:	f000 80a3 	beq.w	8004622 <_printf_i+0x16e>
 80044dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044e4:	e03a      	b.n	800455c <_printf_i+0xa8>
 80044e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044ea:	2b15      	cmp	r3, #21
 80044ec:	d8f6      	bhi.n	80044dc <_printf_i+0x28>
 80044ee:	a101      	add	r1, pc, #4	; (adr r1, 80044f4 <_printf_i+0x40>)
 80044f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044f4:	0800454d 	.word	0x0800454d
 80044f8:	08004561 	.word	0x08004561
 80044fc:	080044dd 	.word	0x080044dd
 8004500:	080044dd 	.word	0x080044dd
 8004504:	080044dd 	.word	0x080044dd
 8004508:	080044dd 	.word	0x080044dd
 800450c:	08004561 	.word	0x08004561
 8004510:	080044dd 	.word	0x080044dd
 8004514:	080044dd 	.word	0x080044dd
 8004518:	080044dd 	.word	0x080044dd
 800451c:	080044dd 	.word	0x080044dd
 8004520:	0800466d 	.word	0x0800466d
 8004524:	08004591 	.word	0x08004591
 8004528:	0800464f 	.word	0x0800464f
 800452c:	080044dd 	.word	0x080044dd
 8004530:	080044dd 	.word	0x080044dd
 8004534:	0800468f 	.word	0x0800468f
 8004538:	080044dd 	.word	0x080044dd
 800453c:	08004591 	.word	0x08004591
 8004540:	080044dd 	.word	0x080044dd
 8004544:	080044dd 	.word	0x080044dd
 8004548:	08004657 	.word	0x08004657
 800454c:	682b      	ldr	r3, [r5, #0]
 800454e:	1d1a      	adds	r2, r3, #4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	602a      	str	r2, [r5, #0]
 8004554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800455c:	2301      	movs	r3, #1
 800455e:	e0a3      	b.n	80046a8 <_printf_i+0x1f4>
 8004560:	6820      	ldr	r0, [r4, #0]
 8004562:	6829      	ldr	r1, [r5, #0]
 8004564:	0606      	lsls	r6, r0, #24
 8004566:	f101 0304 	add.w	r3, r1, #4
 800456a:	d50a      	bpl.n	8004582 <_printf_i+0xce>
 800456c:	680e      	ldr	r6, [r1, #0]
 800456e:	602b      	str	r3, [r5, #0]
 8004570:	2e00      	cmp	r6, #0
 8004572:	da03      	bge.n	800457c <_printf_i+0xc8>
 8004574:	232d      	movs	r3, #45	; 0x2d
 8004576:	4276      	negs	r6, r6
 8004578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800457c:	485e      	ldr	r0, [pc, #376]	; (80046f8 <_printf_i+0x244>)
 800457e:	230a      	movs	r3, #10
 8004580:	e019      	b.n	80045b6 <_printf_i+0x102>
 8004582:	680e      	ldr	r6, [r1, #0]
 8004584:	602b      	str	r3, [r5, #0]
 8004586:	f010 0f40 	tst.w	r0, #64	; 0x40
 800458a:	bf18      	it	ne
 800458c:	b236      	sxthne	r6, r6
 800458e:	e7ef      	b.n	8004570 <_printf_i+0xbc>
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	6820      	ldr	r0, [r4, #0]
 8004594:	1d19      	adds	r1, r3, #4
 8004596:	6029      	str	r1, [r5, #0]
 8004598:	0601      	lsls	r1, r0, #24
 800459a:	d501      	bpl.n	80045a0 <_printf_i+0xec>
 800459c:	681e      	ldr	r6, [r3, #0]
 800459e:	e002      	b.n	80045a6 <_printf_i+0xf2>
 80045a0:	0646      	lsls	r6, r0, #25
 80045a2:	d5fb      	bpl.n	800459c <_printf_i+0xe8>
 80045a4:	881e      	ldrh	r6, [r3, #0]
 80045a6:	4854      	ldr	r0, [pc, #336]	; (80046f8 <_printf_i+0x244>)
 80045a8:	2f6f      	cmp	r7, #111	; 0x6f
 80045aa:	bf0c      	ite	eq
 80045ac:	2308      	moveq	r3, #8
 80045ae:	230a      	movne	r3, #10
 80045b0:	2100      	movs	r1, #0
 80045b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045b6:	6865      	ldr	r5, [r4, #4]
 80045b8:	60a5      	str	r5, [r4, #8]
 80045ba:	2d00      	cmp	r5, #0
 80045bc:	bfa2      	ittt	ge
 80045be:	6821      	ldrge	r1, [r4, #0]
 80045c0:	f021 0104 	bicge.w	r1, r1, #4
 80045c4:	6021      	strge	r1, [r4, #0]
 80045c6:	b90e      	cbnz	r6, 80045cc <_printf_i+0x118>
 80045c8:	2d00      	cmp	r5, #0
 80045ca:	d04d      	beq.n	8004668 <_printf_i+0x1b4>
 80045cc:	4615      	mov	r5, r2
 80045ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80045d2:	fb03 6711 	mls	r7, r3, r1, r6
 80045d6:	5dc7      	ldrb	r7, [r0, r7]
 80045d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045dc:	4637      	mov	r7, r6
 80045de:	42bb      	cmp	r3, r7
 80045e0:	460e      	mov	r6, r1
 80045e2:	d9f4      	bls.n	80045ce <_printf_i+0x11a>
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d10b      	bne.n	8004600 <_printf_i+0x14c>
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	07de      	lsls	r6, r3, #31
 80045ec:	d508      	bpl.n	8004600 <_printf_i+0x14c>
 80045ee:	6923      	ldr	r3, [r4, #16]
 80045f0:	6861      	ldr	r1, [r4, #4]
 80045f2:	4299      	cmp	r1, r3
 80045f4:	bfde      	ittt	le
 80045f6:	2330      	movle	r3, #48	; 0x30
 80045f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004600:	1b52      	subs	r2, r2, r5
 8004602:	6122      	str	r2, [r4, #16]
 8004604:	f8cd a000 	str.w	sl, [sp]
 8004608:	464b      	mov	r3, r9
 800460a:	aa03      	add	r2, sp, #12
 800460c:	4621      	mov	r1, r4
 800460e:	4640      	mov	r0, r8
 8004610:	f7ff fee2 	bl	80043d8 <_printf_common>
 8004614:	3001      	adds	r0, #1
 8004616:	d14c      	bne.n	80046b2 <_printf_i+0x1fe>
 8004618:	f04f 30ff 	mov.w	r0, #4294967295
 800461c:	b004      	add	sp, #16
 800461e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004622:	4835      	ldr	r0, [pc, #212]	; (80046f8 <_printf_i+0x244>)
 8004624:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004628:	6829      	ldr	r1, [r5, #0]
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004630:	6029      	str	r1, [r5, #0]
 8004632:	061d      	lsls	r5, r3, #24
 8004634:	d514      	bpl.n	8004660 <_printf_i+0x1ac>
 8004636:	07df      	lsls	r7, r3, #31
 8004638:	bf44      	itt	mi
 800463a:	f043 0320 	orrmi.w	r3, r3, #32
 800463e:	6023      	strmi	r3, [r4, #0]
 8004640:	b91e      	cbnz	r6, 800464a <_printf_i+0x196>
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	f023 0320 	bic.w	r3, r3, #32
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	2310      	movs	r3, #16
 800464c:	e7b0      	b.n	80045b0 <_printf_i+0xfc>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	f043 0320 	orr.w	r3, r3, #32
 8004654:	6023      	str	r3, [r4, #0]
 8004656:	2378      	movs	r3, #120	; 0x78
 8004658:	4828      	ldr	r0, [pc, #160]	; (80046fc <_printf_i+0x248>)
 800465a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800465e:	e7e3      	b.n	8004628 <_printf_i+0x174>
 8004660:	0659      	lsls	r1, r3, #25
 8004662:	bf48      	it	mi
 8004664:	b2b6      	uxthmi	r6, r6
 8004666:	e7e6      	b.n	8004636 <_printf_i+0x182>
 8004668:	4615      	mov	r5, r2
 800466a:	e7bb      	b.n	80045e4 <_printf_i+0x130>
 800466c:	682b      	ldr	r3, [r5, #0]
 800466e:	6826      	ldr	r6, [r4, #0]
 8004670:	6961      	ldr	r1, [r4, #20]
 8004672:	1d18      	adds	r0, r3, #4
 8004674:	6028      	str	r0, [r5, #0]
 8004676:	0635      	lsls	r5, r6, #24
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	d501      	bpl.n	8004680 <_printf_i+0x1cc>
 800467c:	6019      	str	r1, [r3, #0]
 800467e:	e002      	b.n	8004686 <_printf_i+0x1d2>
 8004680:	0670      	lsls	r0, r6, #25
 8004682:	d5fb      	bpl.n	800467c <_printf_i+0x1c8>
 8004684:	8019      	strh	r1, [r3, #0]
 8004686:	2300      	movs	r3, #0
 8004688:	6123      	str	r3, [r4, #16]
 800468a:	4615      	mov	r5, r2
 800468c:	e7ba      	b.n	8004604 <_printf_i+0x150>
 800468e:	682b      	ldr	r3, [r5, #0]
 8004690:	1d1a      	adds	r2, r3, #4
 8004692:	602a      	str	r2, [r5, #0]
 8004694:	681d      	ldr	r5, [r3, #0]
 8004696:	6862      	ldr	r2, [r4, #4]
 8004698:	2100      	movs	r1, #0
 800469a:	4628      	mov	r0, r5
 800469c:	f7fb fda0 	bl	80001e0 <memchr>
 80046a0:	b108      	cbz	r0, 80046a6 <_printf_i+0x1f2>
 80046a2:	1b40      	subs	r0, r0, r5
 80046a4:	6060      	str	r0, [r4, #4]
 80046a6:	6863      	ldr	r3, [r4, #4]
 80046a8:	6123      	str	r3, [r4, #16]
 80046aa:	2300      	movs	r3, #0
 80046ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046b0:	e7a8      	b.n	8004604 <_printf_i+0x150>
 80046b2:	6923      	ldr	r3, [r4, #16]
 80046b4:	462a      	mov	r2, r5
 80046b6:	4649      	mov	r1, r9
 80046b8:	4640      	mov	r0, r8
 80046ba:	47d0      	blx	sl
 80046bc:	3001      	adds	r0, #1
 80046be:	d0ab      	beq.n	8004618 <_printf_i+0x164>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	079b      	lsls	r3, r3, #30
 80046c4:	d413      	bmi.n	80046ee <_printf_i+0x23a>
 80046c6:	68e0      	ldr	r0, [r4, #12]
 80046c8:	9b03      	ldr	r3, [sp, #12]
 80046ca:	4298      	cmp	r0, r3
 80046cc:	bfb8      	it	lt
 80046ce:	4618      	movlt	r0, r3
 80046d0:	e7a4      	b.n	800461c <_printf_i+0x168>
 80046d2:	2301      	movs	r3, #1
 80046d4:	4632      	mov	r2, r6
 80046d6:	4649      	mov	r1, r9
 80046d8:	4640      	mov	r0, r8
 80046da:	47d0      	blx	sl
 80046dc:	3001      	adds	r0, #1
 80046de:	d09b      	beq.n	8004618 <_printf_i+0x164>
 80046e0:	3501      	adds	r5, #1
 80046e2:	68e3      	ldr	r3, [r4, #12]
 80046e4:	9903      	ldr	r1, [sp, #12]
 80046e6:	1a5b      	subs	r3, r3, r1
 80046e8:	42ab      	cmp	r3, r5
 80046ea:	dcf2      	bgt.n	80046d2 <_printf_i+0x21e>
 80046ec:	e7eb      	b.n	80046c6 <_printf_i+0x212>
 80046ee:	2500      	movs	r5, #0
 80046f0:	f104 0619 	add.w	r6, r4, #25
 80046f4:	e7f5      	b.n	80046e2 <_printf_i+0x22e>
 80046f6:	bf00      	nop
 80046f8:	08004a05 	.word	0x08004a05
 80046fc:	08004a16 	.word	0x08004a16

08004700 <memcpy>:
 8004700:	440a      	add	r2, r1
 8004702:	4291      	cmp	r1, r2
 8004704:	f100 33ff 	add.w	r3, r0, #4294967295
 8004708:	d100      	bne.n	800470c <memcpy+0xc>
 800470a:	4770      	bx	lr
 800470c:	b510      	push	{r4, lr}
 800470e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004712:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004716:	4291      	cmp	r1, r2
 8004718:	d1f9      	bne.n	800470e <memcpy+0xe>
 800471a:	bd10      	pop	{r4, pc}

0800471c <memmove>:
 800471c:	4288      	cmp	r0, r1
 800471e:	b510      	push	{r4, lr}
 8004720:	eb01 0402 	add.w	r4, r1, r2
 8004724:	d902      	bls.n	800472c <memmove+0x10>
 8004726:	4284      	cmp	r4, r0
 8004728:	4623      	mov	r3, r4
 800472a:	d807      	bhi.n	800473c <memmove+0x20>
 800472c:	1e43      	subs	r3, r0, #1
 800472e:	42a1      	cmp	r1, r4
 8004730:	d008      	beq.n	8004744 <memmove+0x28>
 8004732:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004736:	f803 2f01 	strb.w	r2, [r3, #1]!
 800473a:	e7f8      	b.n	800472e <memmove+0x12>
 800473c:	4402      	add	r2, r0
 800473e:	4601      	mov	r1, r0
 8004740:	428a      	cmp	r2, r1
 8004742:	d100      	bne.n	8004746 <memmove+0x2a>
 8004744:	bd10      	pop	{r4, pc}
 8004746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800474a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800474e:	e7f7      	b.n	8004740 <memmove+0x24>

08004750 <_free_r>:
 8004750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004752:	2900      	cmp	r1, #0
 8004754:	d044      	beq.n	80047e0 <_free_r+0x90>
 8004756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800475a:	9001      	str	r0, [sp, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	f1a1 0404 	sub.w	r4, r1, #4
 8004762:	bfb8      	it	lt
 8004764:	18e4      	addlt	r4, r4, r3
 8004766:	f000 f913 	bl	8004990 <__malloc_lock>
 800476a:	4a1e      	ldr	r2, [pc, #120]	; (80047e4 <_free_r+0x94>)
 800476c:	9801      	ldr	r0, [sp, #4]
 800476e:	6813      	ldr	r3, [r2, #0]
 8004770:	b933      	cbnz	r3, 8004780 <_free_r+0x30>
 8004772:	6063      	str	r3, [r4, #4]
 8004774:	6014      	str	r4, [r2, #0]
 8004776:	b003      	add	sp, #12
 8004778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800477c:	f000 b90e 	b.w	800499c <__malloc_unlock>
 8004780:	42a3      	cmp	r3, r4
 8004782:	d908      	bls.n	8004796 <_free_r+0x46>
 8004784:	6825      	ldr	r5, [r4, #0]
 8004786:	1961      	adds	r1, r4, r5
 8004788:	428b      	cmp	r3, r1
 800478a:	bf01      	itttt	eq
 800478c:	6819      	ldreq	r1, [r3, #0]
 800478e:	685b      	ldreq	r3, [r3, #4]
 8004790:	1949      	addeq	r1, r1, r5
 8004792:	6021      	streq	r1, [r4, #0]
 8004794:	e7ed      	b.n	8004772 <_free_r+0x22>
 8004796:	461a      	mov	r2, r3
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	b10b      	cbz	r3, 80047a0 <_free_r+0x50>
 800479c:	42a3      	cmp	r3, r4
 800479e:	d9fa      	bls.n	8004796 <_free_r+0x46>
 80047a0:	6811      	ldr	r1, [r2, #0]
 80047a2:	1855      	adds	r5, r2, r1
 80047a4:	42a5      	cmp	r5, r4
 80047a6:	d10b      	bne.n	80047c0 <_free_r+0x70>
 80047a8:	6824      	ldr	r4, [r4, #0]
 80047aa:	4421      	add	r1, r4
 80047ac:	1854      	adds	r4, r2, r1
 80047ae:	42a3      	cmp	r3, r4
 80047b0:	6011      	str	r1, [r2, #0]
 80047b2:	d1e0      	bne.n	8004776 <_free_r+0x26>
 80047b4:	681c      	ldr	r4, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	6053      	str	r3, [r2, #4]
 80047ba:	4421      	add	r1, r4
 80047bc:	6011      	str	r1, [r2, #0]
 80047be:	e7da      	b.n	8004776 <_free_r+0x26>
 80047c0:	d902      	bls.n	80047c8 <_free_r+0x78>
 80047c2:	230c      	movs	r3, #12
 80047c4:	6003      	str	r3, [r0, #0]
 80047c6:	e7d6      	b.n	8004776 <_free_r+0x26>
 80047c8:	6825      	ldr	r5, [r4, #0]
 80047ca:	1961      	adds	r1, r4, r5
 80047cc:	428b      	cmp	r3, r1
 80047ce:	bf04      	itt	eq
 80047d0:	6819      	ldreq	r1, [r3, #0]
 80047d2:	685b      	ldreq	r3, [r3, #4]
 80047d4:	6063      	str	r3, [r4, #4]
 80047d6:	bf04      	itt	eq
 80047d8:	1949      	addeq	r1, r1, r5
 80047da:	6021      	streq	r1, [r4, #0]
 80047dc:	6054      	str	r4, [r2, #4]
 80047de:	e7ca      	b.n	8004776 <_free_r+0x26>
 80047e0:	b003      	add	sp, #12
 80047e2:	bd30      	pop	{r4, r5, pc}
 80047e4:	20000234 	.word	0x20000234

080047e8 <sbrk_aligned>:
 80047e8:	b570      	push	{r4, r5, r6, lr}
 80047ea:	4e0e      	ldr	r6, [pc, #56]	; (8004824 <sbrk_aligned+0x3c>)
 80047ec:	460c      	mov	r4, r1
 80047ee:	6831      	ldr	r1, [r6, #0]
 80047f0:	4605      	mov	r5, r0
 80047f2:	b911      	cbnz	r1, 80047fa <sbrk_aligned+0x12>
 80047f4:	f000 f8bc 	bl	8004970 <_sbrk_r>
 80047f8:	6030      	str	r0, [r6, #0]
 80047fa:	4621      	mov	r1, r4
 80047fc:	4628      	mov	r0, r5
 80047fe:	f000 f8b7 	bl	8004970 <_sbrk_r>
 8004802:	1c43      	adds	r3, r0, #1
 8004804:	d00a      	beq.n	800481c <sbrk_aligned+0x34>
 8004806:	1cc4      	adds	r4, r0, #3
 8004808:	f024 0403 	bic.w	r4, r4, #3
 800480c:	42a0      	cmp	r0, r4
 800480e:	d007      	beq.n	8004820 <sbrk_aligned+0x38>
 8004810:	1a21      	subs	r1, r4, r0
 8004812:	4628      	mov	r0, r5
 8004814:	f000 f8ac 	bl	8004970 <_sbrk_r>
 8004818:	3001      	adds	r0, #1
 800481a:	d101      	bne.n	8004820 <sbrk_aligned+0x38>
 800481c:	f04f 34ff 	mov.w	r4, #4294967295
 8004820:	4620      	mov	r0, r4
 8004822:	bd70      	pop	{r4, r5, r6, pc}
 8004824:	20000238 	.word	0x20000238

08004828 <_malloc_r>:
 8004828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800482c:	1ccd      	adds	r5, r1, #3
 800482e:	f025 0503 	bic.w	r5, r5, #3
 8004832:	3508      	adds	r5, #8
 8004834:	2d0c      	cmp	r5, #12
 8004836:	bf38      	it	cc
 8004838:	250c      	movcc	r5, #12
 800483a:	2d00      	cmp	r5, #0
 800483c:	4607      	mov	r7, r0
 800483e:	db01      	blt.n	8004844 <_malloc_r+0x1c>
 8004840:	42a9      	cmp	r1, r5
 8004842:	d905      	bls.n	8004850 <_malloc_r+0x28>
 8004844:	230c      	movs	r3, #12
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	2600      	movs	r6, #0
 800484a:	4630      	mov	r0, r6
 800484c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004850:	4e2e      	ldr	r6, [pc, #184]	; (800490c <_malloc_r+0xe4>)
 8004852:	f000 f89d 	bl	8004990 <__malloc_lock>
 8004856:	6833      	ldr	r3, [r6, #0]
 8004858:	461c      	mov	r4, r3
 800485a:	bb34      	cbnz	r4, 80048aa <_malloc_r+0x82>
 800485c:	4629      	mov	r1, r5
 800485e:	4638      	mov	r0, r7
 8004860:	f7ff ffc2 	bl	80047e8 <sbrk_aligned>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	4604      	mov	r4, r0
 8004868:	d14d      	bne.n	8004906 <_malloc_r+0xde>
 800486a:	6834      	ldr	r4, [r6, #0]
 800486c:	4626      	mov	r6, r4
 800486e:	2e00      	cmp	r6, #0
 8004870:	d140      	bne.n	80048f4 <_malloc_r+0xcc>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	4631      	mov	r1, r6
 8004876:	4638      	mov	r0, r7
 8004878:	eb04 0803 	add.w	r8, r4, r3
 800487c:	f000 f878 	bl	8004970 <_sbrk_r>
 8004880:	4580      	cmp	r8, r0
 8004882:	d13a      	bne.n	80048fa <_malloc_r+0xd2>
 8004884:	6821      	ldr	r1, [r4, #0]
 8004886:	3503      	adds	r5, #3
 8004888:	1a6d      	subs	r5, r5, r1
 800488a:	f025 0503 	bic.w	r5, r5, #3
 800488e:	3508      	adds	r5, #8
 8004890:	2d0c      	cmp	r5, #12
 8004892:	bf38      	it	cc
 8004894:	250c      	movcc	r5, #12
 8004896:	4629      	mov	r1, r5
 8004898:	4638      	mov	r0, r7
 800489a:	f7ff ffa5 	bl	80047e8 <sbrk_aligned>
 800489e:	3001      	adds	r0, #1
 80048a0:	d02b      	beq.n	80048fa <_malloc_r+0xd2>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	442b      	add	r3, r5
 80048a6:	6023      	str	r3, [r4, #0]
 80048a8:	e00e      	b.n	80048c8 <_malloc_r+0xa0>
 80048aa:	6822      	ldr	r2, [r4, #0]
 80048ac:	1b52      	subs	r2, r2, r5
 80048ae:	d41e      	bmi.n	80048ee <_malloc_r+0xc6>
 80048b0:	2a0b      	cmp	r2, #11
 80048b2:	d916      	bls.n	80048e2 <_malloc_r+0xba>
 80048b4:	1961      	adds	r1, r4, r5
 80048b6:	42a3      	cmp	r3, r4
 80048b8:	6025      	str	r5, [r4, #0]
 80048ba:	bf18      	it	ne
 80048bc:	6059      	strne	r1, [r3, #4]
 80048be:	6863      	ldr	r3, [r4, #4]
 80048c0:	bf08      	it	eq
 80048c2:	6031      	streq	r1, [r6, #0]
 80048c4:	5162      	str	r2, [r4, r5]
 80048c6:	604b      	str	r3, [r1, #4]
 80048c8:	4638      	mov	r0, r7
 80048ca:	f104 060b 	add.w	r6, r4, #11
 80048ce:	f000 f865 	bl	800499c <__malloc_unlock>
 80048d2:	f026 0607 	bic.w	r6, r6, #7
 80048d6:	1d23      	adds	r3, r4, #4
 80048d8:	1af2      	subs	r2, r6, r3
 80048da:	d0b6      	beq.n	800484a <_malloc_r+0x22>
 80048dc:	1b9b      	subs	r3, r3, r6
 80048de:	50a3      	str	r3, [r4, r2]
 80048e0:	e7b3      	b.n	800484a <_malloc_r+0x22>
 80048e2:	6862      	ldr	r2, [r4, #4]
 80048e4:	42a3      	cmp	r3, r4
 80048e6:	bf0c      	ite	eq
 80048e8:	6032      	streq	r2, [r6, #0]
 80048ea:	605a      	strne	r2, [r3, #4]
 80048ec:	e7ec      	b.n	80048c8 <_malloc_r+0xa0>
 80048ee:	4623      	mov	r3, r4
 80048f0:	6864      	ldr	r4, [r4, #4]
 80048f2:	e7b2      	b.n	800485a <_malloc_r+0x32>
 80048f4:	4634      	mov	r4, r6
 80048f6:	6876      	ldr	r6, [r6, #4]
 80048f8:	e7b9      	b.n	800486e <_malloc_r+0x46>
 80048fa:	230c      	movs	r3, #12
 80048fc:	603b      	str	r3, [r7, #0]
 80048fe:	4638      	mov	r0, r7
 8004900:	f000 f84c 	bl	800499c <__malloc_unlock>
 8004904:	e7a1      	b.n	800484a <_malloc_r+0x22>
 8004906:	6025      	str	r5, [r4, #0]
 8004908:	e7de      	b.n	80048c8 <_malloc_r+0xa0>
 800490a:	bf00      	nop
 800490c:	20000234 	.word	0x20000234

08004910 <_realloc_r>:
 8004910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004914:	4680      	mov	r8, r0
 8004916:	4614      	mov	r4, r2
 8004918:	460e      	mov	r6, r1
 800491a:	b921      	cbnz	r1, 8004926 <_realloc_r+0x16>
 800491c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004920:	4611      	mov	r1, r2
 8004922:	f7ff bf81 	b.w	8004828 <_malloc_r>
 8004926:	b92a      	cbnz	r2, 8004934 <_realloc_r+0x24>
 8004928:	f7ff ff12 	bl	8004750 <_free_r>
 800492c:	4625      	mov	r5, r4
 800492e:	4628      	mov	r0, r5
 8004930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004934:	f000 f838 	bl	80049a8 <_malloc_usable_size_r>
 8004938:	4284      	cmp	r4, r0
 800493a:	4607      	mov	r7, r0
 800493c:	d802      	bhi.n	8004944 <_realloc_r+0x34>
 800493e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004942:	d812      	bhi.n	800496a <_realloc_r+0x5a>
 8004944:	4621      	mov	r1, r4
 8004946:	4640      	mov	r0, r8
 8004948:	f7ff ff6e 	bl	8004828 <_malloc_r>
 800494c:	4605      	mov	r5, r0
 800494e:	2800      	cmp	r0, #0
 8004950:	d0ed      	beq.n	800492e <_realloc_r+0x1e>
 8004952:	42bc      	cmp	r4, r7
 8004954:	4622      	mov	r2, r4
 8004956:	4631      	mov	r1, r6
 8004958:	bf28      	it	cs
 800495a:	463a      	movcs	r2, r7
 800495c:	f7ff fed0 	bl	8004700 <memcpy>
 8004960:	4631      	mov	r1, r6
 8004962:	4640      	mov	r0, r8
 8004964:	f7ff fef4 	bl	8004750 <_free_r>
 8004968:	e7e1      	b.n	800492e <_realloc_r+0x1e>
 800496a:	4635      	mov	r5, r6
 800496c:	e7df      	b.n	800492e <_realloc_r+0x1e>
	...

08004970 <_sbrk_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4d06      	ldr	r5, [pc, #24]	; (800498c <_sbrk_r+0x1c>)
 8004974:	2300      	movs	r3, #0
 8004976:	4604      	mov	r4, r0
 8004978:	4608      	mov	r0, r1
 800497a:	602b      	str	r3, [r5, #0]
 800497c:	f7fc fa3a 	bl	8000df4 <_sbrk>
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	d102      	bne.n	800498a <_sbrk_r+0x1a>
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	b103      	cbz	r3, 800498a <_sbrk_r+0x1a>
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	2000023c 	.word	0x2000023c

08004990 <__malloc_lock>:
 8004990:	4801      	ldr	r0, [pc, #4]	; (8004998 <__malloc_lock+0x8>)
 8004992:	f000 b811 	b.w	80049b8 <__retarget_lock_acquire_recursive>
 8004996:	bf00      	nop
 8004998:	20000240 	.word	0x20000240

0800499c <__malloc_unlock>:
 800499c:	4801      	ldr	r0, [pc, #4]	; (80049a4 <__malloc_unlock+0x8>)
 800499e:	f000 b80c 	b.w	80049ba <__retarget_lock_release_recursive>
 80049a2:	bf00      	nop
 80049a4:	20000240 	.word	0x20000240

080049a8 <_malloc_usable_size_r>:
 80049a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049ac:	1f18      	subs	r0, r3, #4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bfbc      	itt	lt
 80049b2:	580b      	ldrlt	r3, [r1, r0]
 80049b4:	18c0      	addlt	r0, r0, r3
 80049b6:	4770      	bx	lr

080049b8 <__retarget_lock_acquire_recursive>:
 80049b8:	4770      	bx	lr

080049ba <__retarget_lock_release_recursive>:
 80049ba:	4770      	bx	lr

080049bc <_init>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	bf00      	nop
 80049c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c2:	bc08      	pop	{r3}
 80049c4:	469e      	mov	lr, r3
 80049c6:	4770      	bx	lr

080049c8 <_fini>:
 80049c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ca:	bf00      	nop
 80049cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ce:	bc08      	pop	{r3}
 80049d0:	469e      	mov	lr, r3
 80049d2:	4770      	bx	lr
